<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay_Guo的博客</title>
  
  
  <link href="https://guoxiansen.github.io/atom.xml" rel="self"/>
  
  <link href="https://guoxiansen.github.io/"/>
  <updated>2023-11-25T12:44:54.480Z</updated>
  <id>https://guoxiansen.github.io/</id>
  
  <author>
    <name>Clay_Guo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划</title>
    <link href="https://guoxiansen.github.io/2023/11/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://guoxiansen.github.io/2023/11/25/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2023-11-25T07:20:40.000Z</published>
    <updated>2023-11-25T12:44:54.480Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;动态规划&quot;&gt;&lt;a href=&quot;#动态规划&quot; class=&quot;headerlink&quot; title=&quot;动态规划&quot;&gt;&lt;/a&gt;动态规划&lt;/h1&gt;&lt;h1 id=&quot;练习题&quot;&gt;&lt;a href=&quot;#练习题&quot; class=&quot;headerlink&quot; title=&quot;练习题&quot;&gt;&lt;/a&gt;练习</summary>
      
    
    
    
    
    <category term="动态规划" scheme="https://guoxiansen.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>贪心算法</title>
    <link href="https://guoxiansen.github.io/2023/11/25/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    <id>https://guoxiansen.github.io/2023/11/25/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/</id>
    <published>2023-11-25T07:09:53.000Z</published>
    <updated>2023-11-28T02:25:38.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h1><p>题目分类大纲：</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311252041388.png" alt="贪心算法大纲"></p><h2 id="什么是贪心算法？"><a href="#什么是贪心算法？" class="headerlink" title="什么是贪心算法？"></a>什么是贪心算法？</h2><p>贪心算法就是在每个阶段都选择局部最优解，从而达到全局最优。</p><h2 id="贪心算法解题步骤"><a href="#贪心算法解题步骤" class="headerlink" title="贪心算法解题步骤"></a>贪心算法解题步骤</h2><ul><li>将问题分解为若干个子问题</li><li>找出合适的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="455、分发饼干"><a href="#455、分发饼干" class="headerlink" title="455、分发饼干"></a>455、分发饼干</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311252045681.png" alt="image-20231125204525836"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311252045154.png" alt="image-20231125204541221"></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>遍历胃口和饼干列表，但是需要注意的是饼干列表不是每次都在移动，而是匹配了一个才会移动，因此这里不需要进行两层for循环，只需要一层for循环来遍历胃口列表即可。然后饼干列表可以使用一个指针index进行遍历，只有在能够进行匹配的情况下才需要将index进行移动。同时使用index来保存返回的结果。==index可以直接用来当做最终的结果进行返回==</p><p>利用贪心算法，每次都尽量喂饱胃口最大的，如果满足不了则往后移动判断能否满足下一个胃口最大的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">self, g: List[<span class="built_in">int</span>], s: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># 先满足大胃口 | 此时胃口在移动</span></span><br><span class="line">        g.sort(reverse=<span class="literal">True</span>)</span><br><span class="line">        s.sort(reverse=<span class="literal">True</span>) <span class="comment"># 从大到小</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(g)):</span><br><span class="line">            <span class="keyword">if</span> index&lt;<span class="built_in">len</span>(s) <span class="keyword">and</span> s[index]&gt;=g[i]:</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311252104655.png" alt="image-20231125210434577"></p><p>本题不能先移动饼干，如果先移动饼干的话，就会出现下面的情况，导致最终没有满足条件的答案。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311252123926.png" alt="img"></p><p>当然本题也可以先满足胃口小的，做法是类似的。但是如果是满足小胃口的话，就需要注意循环的顺序，这时候就是先遍历饼干，然后使用index对胃口列表进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findContentChildren</span>(<span class="params">self, g: List[<span class="built_in">int</span>], s: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        g.sort()</span><br><span class="line">        s.sort()</span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)):</span><br><span class="line">            <span class="keyword">if</span> index&lt;<span class="built_in">len</span>(g) <span class="keyword">and</span> s[i]&gt;=g[index]:</span><br><span class="line">                index+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> index</span><br></pre></td></tr></table></figure><h2 id="376、摆动序列"><a href="#376、摆动序列" class="headerlink" title="376、摆动序列(*)"></a>376、摆动序列(*)</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271458628.png" alt="image-20231127145825546"></p><p>计算峰值</p><p>prediff = nums[i] - nums[i-1]</p><p>curdiff = nums[i+1] - nums[i]</p><p>如果prediff&gt;0 and curdiff &lt; 0 或者 prediff &lt; 0 and curdiff &gt; 0，就需要统计波动</p><p>有三种特殊情况需要考虑：</p><ul><li>情况一：上下坡中有平坡</li><li>情况二：数组首尾两端</li><li>情况三：单调坡中有平坡</li></ul><p><strong>情况一：上下坡中有平坡</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271510146.png" alt="img"></p><p>可以统一规则，删除左边的3个2</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271511303.png" alt="img"></p><p><strong>情况二：数组首尾两端</strong></p><p>如果数组中只包含两个元素，如果这两个元素不相同则摆动序列也为2</p><p>例如序列[2, 5]，如果靠统计差值计算峰值，需要有三个数才能进行统计，这时候，我们可以假定这个序列为[2,2,5]，这样<code>preDiff=0 and curDiff=3</code>，满足我们的条件，<code>res+=1</code>，就可以统一写法，不需要单独把<code>len(nums)==2</code>的情况单独拎出来了。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271525974.png" alt="376.摆动序列1"></p><p>针对上述情况，我们可以假设res = 1，默认最右边有一个峰值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        curDiff = <span class="number">0</span></span><br><span class="line">        preDiff = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            curDiff = nums[i+<span class="number">1</span>] - nums[i]</span><br><span class="line">            <span class="keyword">if</span> (preDiff&gt;=<span class="number">0</span> <span class="keyword">and</span> curDiff &lt; <span class="number">0</span>) <span class="keyword">or</span> (preDiff&lt;=<span class="number">0</span> <span class="keyword">and</span> curDiff &gt; <span class="number">0</span>):</span><br><span class="line">                res+=<span class="number">1</span></span><br><span class="line">            preDiff = curDiff</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>这样的代码已经可以AC掉力扣中给出的测试用例，但是提交之后还是会有报错，这是因为这个代码忽略了<code>情况三</code>。</p><p><strong>情况三：单调坡中有平坡</strong></p><p>如果这时候的序列是[1, 2, 2, 2, 5]这样的，在上面的代码中得到的答案是3而不是2，这是因为程序的执行会按照情况一进行了。此时我们只需要进行的改动是只有在满足情况的条件下才会去修改<code>preDiff</code>指针。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wiggleMaxLength</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)&lt;=<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">len</span>(nums)</span><br><span class="line">        res = <span class="number">1</span></span><br><span class="line">        curDiff = <span class="number">0</span></span><br><span class="line">        preDiff = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            curDiff = nums[i+<span class="number">1</span>] - nums[i]</span><br><span class="line">            <span class="keyword">if</span> (preDiff&gt;=<span class="number">0</span> <span class="keyword">and</span> curDiff &lt; <span class="number">0</span>) <span class="keyword">or</span> (preDiff&lt;=<span class="number">0</span> <span class="keyword">and</span> curDiff &gt; <span class="number">0</span>):</span><br><span class="line">                res+=<span class="number">1</span></span><br><span class="line">                preDiff = curDiff</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271530437.png" alt="image-20231127153052502"></p><h2 id="53、最大子数组和（-）"><a href="#53、最大子数组和（-）" class="headerlink" title="53、最大子数组和（*）"></a>53、最大子数组和（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271548474.png" alt="image-20231127154858508"></p><p>初次尝试：</p><p>两层for循环进行遍历，计算所有子序列的和，碰到最大的就修改max_。这里需要注意<strong>max_</strong>在进行初始化的时候需要初始化为最小值<code>float(&quot;-inf&quot;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        max_ = <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="comment"># print(i,j)</span></span><br><span class="line">                <span class="comment"># print(nums[i:j+1])</span></span><br><span class="line">                max_ = <span class="built_in">max</span>(max_,<span class="built_in">sum</span>(nums[i:j+<span class="number">1</span>]))</span><br><span class="line">        <span class="keyword">return</span> max_</span><br></pre></td></tr></table></figure><p>力扣中Python代码超时200/210</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271555768.png" alt="image-20231127155543817"></p><p>使用贪心算法</p><p>使用count进行和计算，如果碰到一个负数使得当前的count值小于0，则将count赋值为0重新进行子序列寻找，也设置一个max_初始化为最小值，当count&gt;max_时，就进行更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxSubArray</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        max_ = <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>)</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            count+=nums[i]</span><br><span class="line">            <span class="keyword">if</span> count&gt;max_:</span><br><span class="line">                max_ = count</span><br><span class="line">            <span class="keyword">if</span> count&lt;<span class="number">0</span>:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> max_</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271556201.png" alt="image-20231127155602214"></p><h2 id="122、买卖股票的最佳时机II"><a href="#122、买卖股票的最佳时机II" class="headerlink" title="122、买卖股票的最佳时机II"></a>122、买卖股票的最佳时机II</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311272129099.png" alt="image-20231127212916141"></p><p>贪心算法进行求解时，需要对利润进行拆解：以下面这个例子为例，我们只需要收集正利润的区间，就是股票买卖的区间。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311272133164.png" alt="122.买卖股票的最佳时机II"></p><p>贪心算法就体现在每天只取正利润的部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxProfit</span>(<span class="params">self, prices: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        profit = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(prices)):</span><br><span class="line">            profit += <span class="built_in">max</span>(<span class="number">0</span>,prices[i]-prices[i-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> profit</span><br></pre></td></tr></table></figure><h2 id="55、跳跃游戏"><a href="#55、跳跃游戏" class="headerlink" title="55、跳跃游戏"></a>55、跳跃游戏</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311272143796.png" alt="image-20231127214313444"></p><p>本题思路：通过查看当前结点能够跳跃的最远范围进行校验</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311272206381.png" alt="img"></p><p>这里nums中的元素所表示的含义是能够跳跃的最远范围，我们只需要判断其能够覆盖的范围，然后用其与len(nums)-1进行比较，如果大于等于则返回True，否则循环结束也无法到达最后一个下标的话，则返回False。</p><p>注意这里需要判断<code>i</code>的范围不能超过当前最远能够到达的区域，如果<code>i</code>超过了<code>max_reach</code>则直接break。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        max_reach = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> i &gt; max_reach:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            max_reach = <span class="built_in">max</span>(nums[i]+i, max_reach)</span><br><span class="line">            <span class="keyword">if</span> max_reach &gt;= <span class="built_in">len</span>(nums)-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311272209796.png" alt="image-20231127220956157"></p><p>在Python中无法动态修改for循环中的循环变量，可以改用while循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        reach = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> i &lt;= reach:</span><br><span class="line">            reach = <span class="built_in">max</span>(reach, nums[i]+i)</span><br><span class="line">            <span class="keyword">if</span> reach&gt;=<span class="built_in">len</span>(nums)-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canJump</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        reach = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">            <span class="keyword">if</span> i&gt;reach:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># 防止出现越级现象 例如[3,2,1,0,4] 到下标为3的地方 此时的reach = 3结束</span></span><br><span class="line">            <span class="keyword">if</span> i&lt;=reach:</span><br><span class="line">                reach = <span class="built_in">max</span>(nums[i]+i,reach)</span><br><span class="line">                <span class="keyword">if</span> reach&gt;=<span class="built_in">len</span>(nums)-<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="45、跳跃游戏II"><a href="#45、跳跃游戏II" class="headerlink" title="45、跳跃游戏II"></a>45、跳跃游戏II</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311281000659.png" alt="image-20231128100052826"></p><p>跳跃游戏中，需要我们判断是否能够到达最后一个下标，本题需要我们计算从第一个元素开始到最后一个下标的最小跳跃次数。</p><p>贪心的思路</p><ul><li>局部最优<ul><li>当前尽可能走更多，如果还没到达终点，步数+1</li></ul></li><li>整体最优<ul><li>一步尽可能走更多，从而达到步数最少</li></ul></li></ul><p>记录当前可以覆盖的最远距离和下一步可以覆盖的最远距离</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311281017722.png" alt="45.跳跃游戏II"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; int:</span></span><br><span class="line">        cur_reach = <span class="number">0</span> <span class="comment"># 当前能够到达的最远距离</span></span><br><span class="line">        next_reach = <span class="number">0</span> <span class="comment"># 下一步能够到达的最远距离</span></span><br><span class="line">        res = <span class="number">0</span> <span class="comment"># 记录走的步数</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            next_reach = <span class="built_in">max</span>(next_reach, nums[i]+i)</span><br><span class="line">            <span class="keyword">if</span> i == cur_reach:</span><br><span class="line">                res +=<span class="number">1</span></span><br><span class="line">                cur_reach = next_reach</span><br><span class="line">                <span class="keyword">if</span> next_reach&gt;=<span class="built_in">len</span>(nums)-<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ul><li>时间复杂度O(n)</li><li>空间复杂度O(1)</li></ul><h1 id="贪心总结"><a href="#贪心总结" class="headerlink" title="贪心总结"></a>贪心总结</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;贪心算法&quot;&gt;&lt;a href=&quot;#贪心算法&quot; class=&quot;headerlink&quot; title=&quot;贪心算法&quot;&gt;&lt;/a&gt;贪心算法&lt;/h1&gt;&lt;p&gt;题目分类大纲：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSe</summary>
      
    
    
    
    
    <category term="贪心" scheme="https://guoxiansen.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>回溯算法</title>
    <link href="https://guoxiansen.github.io/2023/11/22/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    <id>https://guoxiansen.github.io/2023/11/22/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</id>
    <published>2023-11-22T02:20:34.000Z</published>
    <updated>2023-11-27T05:20:21.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><p>回溯算法是一种搜索的方法，在二叉树总结当中，经常使用到递归去解决相关的问题，在二叉树的<strong>所有路径</strong>问题中，我们就使用到了回溯算法来找到所有的路径。</p><p>回溯算法本质就是去穷举，性能并不是那么高效。一般为了提高效率，往往回溯算法会跟剪枝操作相结合。</p><p>回溯算法通常可以用来解决一些问题，这也是为什么会有回溯算法的原因</p><ul><li>组合问题<ul><li>N个数里面按照一定规则找出k个数的集合。<strong>组合不强调元素的顺序</strong></li></ul></li><li>切割问题<ul><li>一个字符串按一定规则有几种切割方式</li></ul></li><li>子集问题<ul><li>一个N个数的集合里有多少符合条件的子集</li></ul></li><li>排列问题<ul><li>N个数按照一定规则全排列，有几种排列方式。<strong>排列强调元素的顺序</strong></li></ul></li><li>棋盘问题<ul><li>N皇后、解数独问题</li></ul></li></ul><h2 id="理解回溯"><a href="#理解回溯" class="headerlink" title="理解回溯"></a>理解回溯</h2><p>回溯法解决的问题都可以抽象为树形结构，回溯算法解决问题都是在集合中递归查找子集，<strong>集合的大小构成了树的宽度</strong>，<strong>递归的深度构成了树的深度</strong>。</p><p>递归必须要有终止条件，所以一定是一个高度有限的N叉树。</p><h2 id="回溯模板"><a href="#回溯模板" class="headerlink" title="回溯模板"></a>回溯模板</h2><p>递归三部曲：</p><ul><li>返回值及参数<ul><li>void backtracking(参数)</li></ul></li><li>回溯函数的终止条件<br>+ </li><li>回溯搜索的遍历过程<ul><li><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221034861.png" alt="回溯算法理论基础"></li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">backtracking</span><span class="params">(参数)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (终止条件) &#123;</span><br><span class="line">        存放结果;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;</span><br><span class="line">        处理节点;</span><br><span class="line">        backtracking(路径，选择列表); <span class="comment">// 递归</span></span><br><span class="line">        回溯，撤销处理结果</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="77、组合"><a href="#77、组合" class="headerlink" title="77、组合"></a>77、组合</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221036587.png" alt="image-20231122103657483"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n,k,startindex,path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)==k:</span><br><span class="line">                <span class="comment"># 这里需要注意，因为列表在Python中是可变数据类型，后面的修改会导致path变为[]</span></span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="comment"># 这里的startindex代表的是在单层递归中需要遍历的次数 从startindex一直到n寻找符合条件的数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n+<span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                backtracking(n,k,i+<span class="number">1</span>,path)</span><br><span class="line">                a = path.pop()</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221040604.png" alt="image-20231122104026446"></p><h3 id="回溯-剪枝"><a href="#回溯-剪枝" class="headerlink" title="回溯+剪枝"></a><strong>回溯+剪枝</strong></h3><p>使用剪枝的原理就在于如果剩余的元素个数已经小于k-len(path)的时候，我们就不再往下继续了。</p><ol><li>已经选择过的元素个数：<code>len(path)</code></li><li>还需要选择的个数<code>k-len(path)</code>  </li><li>在集合中更需要从最多要从下标为<code>n-(k-len(path))+1</code>开始遍历，在python中因为range循环的时候是左闭右开，所以还需要<code>+1</code></li></ol><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221105316.png" alt="77.组合4"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combine</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n,k,startindex,path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)==k:</span><br><span class="line">                <span class="comment"># print(path)</span></span><br><span class="line">                <span class="comment"># 这里需要注意，因为列表在Python中是可变数据类型，后面的修改会导致path变为[]</span></span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">           </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, n-(k-<span class="built_in">len</span>(path))+<span class="number">1</span>+<span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                backtracking(n,k,i+<span class="number">1</span>,path)</span><br><span class="line">                <span class="comment"># 回溯 退出上一个元素</span></span><br><span class="line">                path.pop()</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251425543.png" alt="image-20231125142534496"></p><h2 id="216、组合总数III"><a href="#216、组合总数III" class="headerlink" title="216、组合总数III"></a>216、组合总数III</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221749859.png" alt="image-20231122174951944"></p><p>利用回溯代码模板。其中需要注意的是，如果path列表的和已经超过n，那么可以直接进行剪枝，除此之外，如果剩余的数字长度小于k-len(path)的话，就可以不用继续循环了，这一点也方便我们进行剪枝。</p><p>递归的三要素</p><ul><li>返回值和参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n,k,startindex,path</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">sum</span>(path)&gt;n:</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path)==k <span class="keyword">and</span> <span class="built_in">sum</span>(path)==n:</span><br><span class="line">    res.append(path[:])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>递归体部分</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="number">9</span> - (k - <span class="built_in">len</span>(path)) + <span class="number">1</span> + <span class="number">1</span>):</span><br><span class="line">    path.append(i)</span><br><span class="line">    backtracking(n,k,i+<span class="number">1</span>,path)</span><br><span class="line">    path.pop()</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum3</span>(<span class="params">self, k: <span class="built_in">int</span>, n: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n,k,startindex,path</span>):</span></span><br><span class="line">            <span class="comment"># 剪枝</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">sum</span>(path)&gt;n:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)==k <span class="keyword">and</span> <span class="built_in">sum</span>(path)==n:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="number">9</span> - (k - <span class="built_in">len</span>(path))+<span class="number">1</span>+<span class="number">1</span>):</span><br><span class="line">                path.append(i)</span><br><span class="line">                backtracking(n,k,i+<span class="number">1</span>,path)</span><br><span class="line">                path.pop()</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        backtracking(n,k,<span class="number">1</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="17、电话号码的字母组合"><a href="#17、电话号码的字母组合" class="headerlink" title="17、电话号码的字母组合"></a>17、电话号码的字母组合</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221514238.png" alt="image-20231122151406020"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221514355.png" alt="image-20231122151443212"></p><p>思路</p><p>本题类似于组合问题，需要根据输入的数字对其能够涵盖的字母进行组合，需要解决下面几个问题：</p><ul><li>数字和字母如何进行映射</li><li>两个字母两个for循环，三个字母三个for循环，多个字母多个for循环</li><li>输入异常字母如何进行处理？</li></ul><p>递归三要素</p><ul><li>递归的参数</li></ul><p>参数是<code>digits</code>和<code>index</code>，其中<code>digits</code>是题目给出的字符串，如“23”，而<code>index</code>是记录当前已经遍历到第几个数字了。</p><ul><li>递归结束的条件</li></ul><p>如果index的长度和digits长度一样的话，直接return</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> index==<span class="built_in">len</span>(digits):</span><br><span class="line">    res.append(path) <span class="comment"># 这里的path被定义为字符串 而字符串在python中是不可变数据类型，因此可以直接用</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>递归体部分</li></ul><p>需要注意的是，回溯的时候对于字符串要想去掉最后一个字符的方法是直接<code>s=s[:-1]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取字符串中的数字</span></span><br><span class="line">mynum = <span class="built_in">int</span>(digits[index])</span><br><span class="line"><span class="comment"># 获取电话号码对应的字符组合</span></span><br><span class="line">char = myhash[mynum]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(char)):</span><br><span class="line">    path+=char[i]</span><br><span class="line">    backtracking(digits, index+<span class="number">1</span>, path)</span><br><span class="line">    path = path[:-<span class="number">1</span>] <span class="comment"># 刨去字符串的最后一个字符</span></span><br></pre></td></tr></table></figure><p>本题是不需要<code>startindex</code>的，因为遍历的不是同一个集合，而是不同的集合。在回溯问题中，如果是遍历同一个集合就需要传递一个参数<code>startindex</code>，用来表示的当前遍历到集合中的第几位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">letterCombinations</span>(<span class="params">self, digits: <span class="built_in">str</span></span>) -&gt; List[str]:</span></span><br><span class="line">        myhash = [<span class="string">&quot;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="string">&quot;abc&quot;</span>,<span class="string">&quot;def&quot;</span>,<span class="string">&quot;ghi&quot;</span>,<span class="string">&quot;jkl&quot;</span>,<span class="string">&quot;mno&quot;</span>,<span class="string">&quot;pqrs&quot;</span>,<span class="string">&quot;tuv&quot;</span>,<span class="string">&quot;wxyz&quot;</span>]</span><br><span class="line">        res = []</span><br><span class="line">        s = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">digits, index</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> s</span><br><span class="line">            <span class="keyword">if</span> index==<span class="built_in">len</span>(digits):</span><br><span class="line">                res.append(s)</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="comment"># digit表示digits中的数字</span></span><br><span class="line">            digit = <span class="built_in">int</span>(digits[index])</span><br><span class="line">            <span class="comment"># letters表示digit所代表的数字对应的字母有哪些</span></span><br><span class="line">            letters = myhash[digit]</span><br><span class="line">            <span class="comment"># for循环遍历这些字母 </span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(letters)):</span><br><span class="line">                s+=letters[i]</span><br><span class="line">                <span class="comment"># 进行回溯</span></span><br><span class="line">                backtracking(digits,index+<span class="number">1</span>)</span><br><span class="line">                s = s[:-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(digits)==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line">        backtracking(digits,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>本题有一个需要特殊处理的地方，如果digits为空字符串的话，直接返回空列表，不需要在进行递归回溯了。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311221755946.png" alt="image-20231122151431566"></p><h2 id="39、组合总数"><a href="#39、组合总数" class="headerlink" title="39、组合总数"></a>39、组合总数</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311222227480.png" alt="image-20231122222712060"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311222227170.png" alt="image-20231122222723187"></p><p>本题中说了candidates中的同一个数字可以无限制重复被选取，所以我们在进行递归的时候，传递的<code>startindex</code>就是<code>i</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum</span>(<span class="params">self, candidates: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># 记录总和</span></span><br><span class="line">        sum_ = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        path = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">path,candidates,target,startindex</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> sum_</span><br><span class="line">            <span class="keyword">if</span> sum_&gt;target:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> sum_==target:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(candidates)):</span><br><span class="line">                sum_+=candidates[i]</span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                <span class="comment"># 这里传入的startindex为i 这样可以重复选择相同的数</span></span><br><span class="line">                backtracking(path,candidates,target,i)</span><br><span class="line">                sum_-=candidates[i]</span><br><span class="line">                path.pop()</span><br><span class="line">        backtracking([],candidates,target,<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311222227186.png" alt="image-20231122222739974"></p><h2 id="40、组合总数II（-）"><a href="#40、组合总数II（-）" class="headerlink" title="40、组合总数II（*）"></a>40、组合总数II（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311231100042.png" alt="image-20231123110032934"></p><p>本题需要注意的是，跟前面不同的地方在于每个数字在每个组合中只能使用一次，同时在解集中不能包含重复的组合。<strong>因此想到设置一个used数组来表示每个元素是否已经被访问过。</strong></p><p>==其中candidates数组需要进行排序==，这样能够保证如果数字相同的情况下，只会使用一次。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311240905249.png" alt="40.组合总和II"></p><p>要去重的是同一层上是否使用过，可以看出在candidates[i] == candidates[i - 1]相同的情况下：</p><ul><li>used[i - 1] == true，说明同一树枝candidates[i - 1]使用过</li><li>used[i - 1] == false，说明同一树层candidates[i - 1]使用过</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241828604.png" alt="40.组合总和II1"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241829158.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span>(<span class="params">self, candidates: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []  <span class="comment"># 用于记录返回结果</span></span><br><span class="line">        sum_ = <span class="number">0</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">candidates,target,path,startindex,used</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> sum_</span><br><span class="line">            <span class="keyword">if</span> sum_&gt;target:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> sum_==target:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i&gt;startindex <span class="keyword">and</span> candidates[i]==candidates[i-<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                sum_+=candidates[i]</span><br><span class="line">                used[i]=<span class="literal">True</span></span><br><span class="line">                backtracking(candidates,target,path,i+<span class="number">1</span>,used)</span><br><span class="line">                sum_-=candidates[i]</span><br><span class="line">                used[i]=<span class="literal">False</span></span><br><span class="line">                path.pop()</span><br><span class="line">        <span class="comment"># candidates需要进行排序，否则相同的数字可能不会连续</span></span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtracking(candidates,target,[],<span class="number">0</span>,[<span class="literal">False</span>]*<span class="built_in">len</span>(candidates))</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311231102774.png" alt="image-20231123110223652"></p><p>优化 + 不适用<code>used</code>数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">combinationSum2</span>(<span class="params">self, candidates: List[<span class="built_in">int</span>], target: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">candidates,target,startindex,sum_,path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> sum_==target:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="built_in">len</span>(candidates)):</span><br><span class="line">                <span class="keyword">if</span> i&gt;startindex <span class="keyword">and</span> candidates[i]==candidates[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                sum_+=candidates[i]</span><br><span class="line">                <span class="comment"># 这里进行判断，如果超过target则直接break 免去了后面的循环 节省时间开销</span></span><br><span class="line">                <span class="keyword">if</span> sum_ &gt; target:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                path.append(candidates[i])</span><br><span class="line">                backtracking(candidates,target,i+<span class="number">1</span>,sum_,path)</span><br><span class="line">                sum_-=candidates[i]</span><br><span class="line">                path.pop()</span><br><span class="line">        candidates.sort()</span><br><span class="line">        backtracking(candidates,target,<span class="number">0</span>,<span class="number">0</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271001830.png" alt="image-20231127100152702"></p><h2 id="131、分割回文串（-）"><a href="#131、分割回文串（-）" class="headerlink" title="131、分割回文串（*）"></a>131、分割回文串（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311231517950.png" alt="image-20231123151758868"></p><p>本题递归结束的条件是当startindex==字符串s 的长度时，往结果集中添加数据并返回。</p><p>递归的参数是<code>startindex</code>，<code>s</code>和<code>path</code>，需要进行递归的字符串为s[startindex:i+1]进行切片，同时本题要求是回文子串，所以还需要加上判断是否是回文数字，如果是回文数字才进行回溯，不是回文数字的话不进行任何操作。</p><p>在递归体部分，需要一个for循环，其遍历范围是startindex到len(s)，然后往path列表中添加的元素是s[startindex:i+1]，这里注意字符串的切片是左闭右开的，因此这里区间是i+1，然后递归进行遍历backtracking(s,i+1,path)，注意这里的startindex需要从i+1开始，这是因为根据题目的要求，不会有重复出现的子串。在39、组合总数一题中，题目说明candidates中的元素是可以重复出现的，因此我们在进行递归的时候传入的startindex就为for循环遍历的层数i，这样就可以一直递归下去找到符合条件的答案。</p><p>递归三要素</p><ul><li>参数和返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">s, startindex, path</span>):</span></span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> startindex==<span class="built_in">len</span>(s):</span><br><span class="line">    res.append(path[:])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>递归体 单层搜索过程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="keyword">if</span> huiwen(s[startindex:i+<span class="number">1</span>]):</span><br><span class="line">        path.append(s[startindex:i+<span class="number">1</span>])</span><br><span class="line">        backtracking(s,i+<span class="number">1</span>,path)</span><br><span class="line">        path.pop()</span><br></pre></td></tr></table></figure><p>全部代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; List[List[str]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">s,startindex,path</span>):</span></span><br><span class="line">            <span class="comment"># print(startindex)</span></span><br><span class="line">            <span class="comment"># 如果分割到字符串末尾，则该轮结束</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s)==startindex:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(s)):</span><br><span class="line">                <span class="comment"># print(s[startindex:i+1])</span></span><br><span class="line">                <span class="comment"># 如果不是回文子串 不往path中添加</span></span><br><span class="line">                <span class="keyword">if</span> huiwen(s[startindex:i+<span class="number">1</span>]):</span><br><span class="line">                    path.append(s[startindex:i+<span class="number">1</span>])</span><br><span class="line">                    backtracking(s,i+<span class="number">1</span>,path)</span><br><span class="line">                    path.pop()</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">huiwen</span>(<span class="params">s</span>):</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> s==s[::-<span class="number">1</span>] <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># i = 0</span></span><br><span class="line">            <span class="comment"># j = len(s)-1</span></span><br><span class="line">            <span class="comment"># while i&lt;j:</span></span><br><span class="line">            <span class="comment">#     if s[i]!=s[j]:</span></span><br><span class="line">            <span class="comment">#         return False</span></span><br><span class="line">            <span class="comment">#     i+=1</span></span><br><span class="line">            <span class="comment">#     j-=1</span></span><br><span class="line">            <span class="comment"># return True</span></span><br><span class="line">        </span><br><span class="line">        backtracking(s,<span class="number">0</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251702558.png" alt="image-20231125170244551"></p><h2 id="93、复原IP地址（-）"><a href="#93、复原IP地址（-）" class="headerlink" title="93、复原IP地址（*）"></a>93、复原IP地址（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311232157722.png" alt="image-20231123215751666"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311232158813.png" alt="image-20231123215802814"></p><p>本题与分割字符串有几分相似，也属于分割问题。</p><p>递归三要素</p><ul><li>递归参数</li></ul><p>字符串s，startindex和pointNum</p><p>pointNum表示IP地址中的<code>.</code>，如果有三个<code>.</code>的话，就说明当前的IP地址已经被分成四段了。</p><ul><li>递归结束的条件</li></ul><p>根据本题要求，只要我们当前的字符串已经被分割成四段，即pointNum==3的时候，往res列表中添加结果并返回</p><ul><li>单层递归体中的操作</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="built_in">len</span>(s)):</span><br><span class="line">    <span class="comment"># IP 地址合法性剪枝</span></span><br><span class="line">    <span class="keyword">if</span> isValid(s[startindex:i+<span class="number">1</span>]):</span><br><span class="line">        sub = s[startindex:i+<span class="number">1</span>]</span><br><span class="line">        <span class="comment"># 这里不能直接修改 path，而是使用一个副本进行传参</span></span><br><span class="line">        backtracking(i + <span class="number">1</span>, path + sub + <span class="string">&quot;.&quot;</span>, pointNum + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251654603.png" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">restoreIpAddresses</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; List[str]:</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">startindex, path, pointNum</span>):</span></span><br><span class="line">            <span class="comment"># 长度剪枝</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) - startindex &gt; (<span class="number">4</span> - pointNum) * <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) - startindex &lt; (<span class="number">4</span> - pointNum):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> pointNum == <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">if</span> isValid(s[startindex:]):</span><br><span class="line">                    res.append(path + s[startindex:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="built_in">len</span>(s)):</span><br><span class="line">                <span class="comment"># IP 地址合法性剪枝</span></span><br><span class="line">                <span class="keyword">if</span> isValid(s[startindex:i+<span class="number">1</span>]):</span><br><span class="line">                    sub = s[startindex:i+<span class="number">1</span>]</span><br><span class="line">                    <span class="comment"># 这里不能直接修改 path，而是使用一个副本进行传参</span></span><br><span class="line">                    backtracking(i + <span class="number">1</span>, path + sub + <span class="string">&quot;.&quot;</span>, pointNum + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">s</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) == <span class="number">0</span> <span class="keyword">or</span> (s[<span class="number">0</span>] == <span class="string">&quot;0&quot;</span> <span class="keyword">and</span> <span class="built_in">len</span>(s) &gt; <span class="number">1</span>) <span class="keyword">or</span> <span class="built_in">int</span>(s) &gt; <span class="number">255</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        backtracking(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="78、子集"><a href="#78、子集" class="headerlink" title="78、子集"></a>78、子集</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241002663.png" alt="image-20231124100225029"></p><p>思路：</p><p>如果把子集问题抽象成一颗树的话，组合问题和分割问题都是收集树的叶子结点，子集问题是找树的所有结点。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251351905.png" alt="78.子集"></p><p>子集是无序的，{1,2}和{2,1}是等价的，也就是说之前取过的元素后面不会再取，因此在递归的过程中还需要传递一个参数startindex，每次都是从startindex继续往后进行搜索，而不是从0开始，如果是排列问题的话，for循环就要从0开始了，因为在排列中{1,2}和{2,1}是两个不一样的排列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsets</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,startindex,path</span>):</span></span><br><span class="line">            res.append(path[:])</span><br><span class="line">            <span class="comment"># 这里不需要加递归结束的条件，当startindex达到len(nums)的时候程序也就自动返回了</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(nums)):</span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>,path)</span><br><span class="line">                path.pop()</span><br><span class="line">        backtracking(nums,<span class="number">0</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="90、子集II（-）"><a href="#90、子集II（-）" class="headerlink" title="90、子集II（*）"></a>90、子集II（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241018069.png" alt="image-20231124101803120"></p><p>本题和上一题的区别在于nums数组中可能包含重复元素，我们首先将其进行==排序==，然后在往res列表中添加数据的时候，进行判断只有不在res列表中的结果才能添加进去。其余部分和上一题一样。</p><ul><li>使用<code>in</code>操作去重</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="comment"># nums = list(set(nums))</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums, startindex, path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> path <span class="keyword">not</span> <span class="keyword">in</span> res:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">            <span class="keyword">if</span> startindex&gt;<span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(nums)):</span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>,path)</span><br><span class="line">                path.pop()</span><br><span class="line">        nums.sort()</span><br><span class="line">        backtracking(nums,<span class="number">0</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>本题是树层去重，在同一层重复出现的需要去除重复值。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241804501.png" alt="90.子集II"></p><ul><li>直接判断去重</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,startindex,path</span>):</span></span><br><span class="line">            res.append(path[:])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> i&gt;startindex <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums, i+<span class="number">1</span>, path)</span><br><span class="line">                path.pop()</span><br><span class="line">        nums.sort()</span><br><span class="line">        backtracking(nums,<span class="number">0</span>,[])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><ul><li>使用==used数组==去重（推荐）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">subsetsWithDup</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        used = [<span class="literal">False</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,startindex,path,used</span>):</span></span><br><span class="line">            res.append(path[:])</span><br><span class="line">            <span class="keyword">if</span> startindex &gt; <span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                used[i] = <span class="literal">True</span></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums,i+<span class="number">1</span>,path,used)</span><br><span class="line">                used[i] = <span class="literal">False</span></span><br><span class="line">                path.pop()</span><br><span class="line">        nums.sort()</span><br><span class="line">        backtracking(nums,<span class="number">0</span>,[],used)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311241804501.png" alt="90.子集II"></p><h2 id="491、递增子序列（-）"><a href="#491、递增子序列（-）" class="headerlink" title="491、递增子序列（*）"></a>491、递增子序列（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311242113731.png" alt="image-20231124211319729"></p><p>递归三要素</p><ul><li>参数和返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums, startindex, path</span>):</span></span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><p>题目中要求递增子序列中至少2个元素，因此可以判断如果len(path)&gt;1则往res列表中添加结果并返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path)&gt;<span class="number">1</span>:</span><br><span class="line">    res.append(path[:])</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><ul><li>单层搜索逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">uset = <span class="built_in">set</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex, <span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> (path <span class="keyword">and</span> path[-<span class="number">1</span>]&gt;=nums[i]) <span class="keyword">or</span> nums[i] <span class="keyword">in</span> uset:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">        uset.add(nums[i])</span><br><span class="line">        path.append(nums[i])</span><br><span class="line">        backtracking(nums,i+<span class="number">1</span>,path)</span><br><span class="line">        path.pop()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findSubsequences</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,path,startindex</span>):</span></span><br><span class="line">            <span class="keyword">if</span> startindex&gt;<span class="built_in">len</span>(nums):</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)&gt;<span class="number">1</span>:</span><br><span class="line">                res.append(path[:])</span><br><span class="line">            uset = <span class="built_in">set</span>()  <span class="comment"># 使用集合对本层元素进行去重</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(startindex,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> (path <span class="keyword">and</span> path[-<span class="number">1</span>]&gt;nums[i]) <span class="keyword">or</span> nums[i] <span class="keyword">in</span> uset:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                uset.add(nums[i])</span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums,path,i+<span class="number">1</span>)</span><br><span class="line">                path.pop()</span><br><span class="line">                </span><br><span class="line">        backtracking(nums,[],<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311242134495.png" alt="image-20231124213406251"></p><h2 id="46、全排列"><a href="#46、全排列" class="headerlink" title="46、全排列"></a>46、全排列</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311242145906.png" alt="image-20231124214516935"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        used = [<span class="literal">False</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,path,used</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)==<span class="built_in">len</span>(nums):</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="keyword">if</span> used[i]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                used[i]=<span class="literal">True</span></span><br><span class="line">                path.append(nums[i])</span><br><span class="line">                backtracking(nums,path,used)</span><br><span class="line">                used[i]=<span class="literal">False</span></span><br><span class="line">                path.pop()</span><br><span class="line">        backtracking(nums,[],used)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>全排列和组合问题、切割问题以及子集问题的区别就在于每次遍历都需要==从0开始==，而不是传进来的startindex，也就是说全排列问题中是不需要startindex的。</p><p>另外在之前的几种问题中，有几个我们传入参数不是i+1而是i的，这是因为题目中说明可以出现重复元素。如果要求是不能出现重复元素的话，只能传入i+1。</p><p>递归三部曲</p><ul><li>参数和返回值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,path,used</span>):</span></span><br></pre></td></tr></table></figure><ul><li>递归终止条件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(path)==<span class="built_in">len</span>(nums):</span><br><span class="line">    res.append(path[:])</span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure><ul><li>单层搜索逻辑</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">    <span class="keyword">if</span> used[i]:</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    used[i]=<span class="literal">True</span></span><br><span class="line">    path.append(nums[i])</span><br><span class="line">    backtracking(nums,path)</span><br><span class="line">    used[i]=<span class="literal">False</span></span><br><span class="line">    path.pop()</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251123623.png" alt="image-20231125112358453"></p><h2 id="47、全排列II（-）"><a href="#47、全排列II（-）" class="headerlink" title="47、全排列II（*）"></a>47、全排列II（*）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311242158725.png" alt="image-20231124215605773"></p><p>本题因为nums中包含重复的数字，因此需要去重，去重的时候因为需要判断相邻的两个数是否相等，所以在一开始需要对nums进行<strong>排序</strong>。之后本题的和全排列的区别就在于需要判断相邻的两数是否相等并且前一个数是否没有用过。</p><p>除此之外，如果层内使用过我们也应该</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permuteUnique</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        res = []</span><br><span class="line">        used = [<span class="literal">False</span>]*<span class="built_in">len</span>(nums)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">nums,path,used</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(path)==<span class="built_in">len</span>(nums):</span><br><span class="line">                res.append(path[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nums)):</span><br><span class="line">                <span class="comment"># 这里的used[i-1] 如果等于False 说明在同一层已经使用过了</span></span><br><span class="line">                <span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i-<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="comment"># 在同一个树枝上 如果used[i]==False可以继续使用</span></span><br><span class="line">                <span class="keyword">if</span> used[i]==<span class="literal">False</span>:</span><br><span class="line">                    used[i]=<span class="literal">True</span></span><br><span class="line">                    path.append(nums[i])</span><br><span class="line">                    backtracking(nums,path,used)</span><br><span class="line">                    used[i]=<span class="literal">False</span></span><br><span class="line">                    path.pop()</span><br><span class="line">        nums.sort()</span><br><span class="line">        backtracking(nums,[],used)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><strong>组合问题</strong>和<strong>排列问题</strong>是在树形结构的叶子结点上收集结果，而子集问题就是取树上所有结点的结果。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311251128085.png" alt="image-20231125112843814"></p><h2 id="784、字母大小写全排列"><a href="#784、字母大小写全排列" class="headerlink" title="784、字母大小写全排列"></a>784、字母大小写全排列</h2><h2 id="322、重新安排行程（hard"><a href="#322、重新安排行程（hard" class="headerlink" title="322、重新安排行程（hard)"></a>322、重新安排行程（hard)</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271037450.png" alt="image-20231127103728274"></p><h2 id="51、N皇后"><a href="#51、N皇后" class="headerlink" title="51、N皇后"></a>51、N皇后</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271114531.png" alt="image-20231127111457348"></p><p><strong>递归参数</strong></p><p>定义res来存放最终的结果，n棋盘大小，row记录当前遍历到棋盘的第几层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><p><strong>递归终止条件</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311271119405.jpg" alt="51.N皇后"></p><p>当递归到叶子结点的时候就可以收集结果了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> row==n:</span><br><span class="line">    res.append(chessboard)</span><br><span class="line">    <span class="keyword">return</span> ;</span><br></pre></td></tr></table></figure><p><strong>单层递归逻辑</strong></p><p>遍历这个棋盘的每一行，在python中，二维数组的表示就用嵌套列表表示即可。</p><p>验证棋盘是否合法</p><ul><li>皇后不能同行</li><li>皇后不能同列</li><li>皇后不能斜对角线（45度和135度）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">row, col, chessboard</span>):</span></span><br><span class="line">            <span class="comment"># 列检查</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][col] == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 45°角检查 这里的检查是从row col往前找</span></span><br><span class="line">            i,j = row-<span class="number">1</span>,col-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][j] == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                i-=<span class="number">1</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 135°角检查</span></span><br><span class="line">            i,j = row-<span class="number">1</span>, col+<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(chessboard):</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][j]==<span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">solveNQueens</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; List[List[str]]:</span>    </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span>(<span class="params">n,row,chessboard</span>):</span></span><br><span class="line">            <span class="comment"># 递归终止的条件 当递归参数row==n时就进行发返回 并将结果添加到res中</span></span><br><span class="line">            <span class="keyword">if</span> row==n:</span><br><span class="line">                res.append(chessboard[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="comment"># 对棋盘的每一行进行操作 判断是否合法</span></span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> isValid(row,col,chessboard):</span><br><span class="line">                    chessboard[row] = chessboard[row][:col] + <span class="string">&quot;Q&quot;</span> + chessboard[row][col+<span class="number">1</span>:]</span><br><span class="line">                    backtracking(n,row+<span class="number">1</span>,chessboard)</span><br><span class="line">                    chessboard[row] = chessboard[row][:col] + <span class="string">&quot;.&quot;</span> + chessboard[row][col+<span class="number">1</span>:]</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">row, col, chessboard</span>):</span></span><br><span class="line">            <span class="comment"># 列检查</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(row):</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][col] == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="comment"># 45°角检查 这里的检查是从row col往前找</span></span><br><span class="line">            i,j = row-<span class="number">1</span>,col-<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&gt;=<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][j] == <span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                i-=<span class="number">1</span></span><br><span class="line">                j-=<span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 135°角检查</span></span><br><span class="line">            i,j = row-<span class="number">1</span>, col+<span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i&gt;=<span class="number">0</span> <span class="keyword">and</span> j&lt;<span class="built_in">len</span>(chessboard):</span><br><span class="line">                <span class="keyword">if</span> chessboard[i][j]==<span class="string">&quot;Q&quot;</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        chessboard = [<span class="string">&quot;.&quot;</span>*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n) ]</span><br><span class="line">        print(chessboard)</span><br><span class="line">        backtracking(n,<span class="number">0</span>,chessboard)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="解数独"><a href="#解数独" class="headerlink" title="解数独"></a>解数独</h2><h1 id="回溯总结"><a href="#回溯总结" class="headerlink" title="回溯总结"></a>回溯总结</h1><p>一般情况下，如果题目中要求不能出现重复的数据，需要搭配这used数组进行使用，除此之外还需要对集合进行一个排序，这样可以在值相同的情况下进行判断。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> i&gt;<span class="number">0</span> <span class="keyword">and</span> nums[i]==nums[i-<span class="number">1</span>] <span class="keyword">and</span> <span class="keyword">not</span> used[i-<span class="number">1</span>]:</span><br><span class="line">    <span class="keyword">continue</span></span><br></pre></td></tr></table></figure><p><code>used[i-1]==False</code> 说明在同一层的前面结点已经使用过该数据了，后面不需要重复进行操作。</p><p>如果集合中存在重复的数字序列，则需要对其进行排序</p><ul><li>组合总数II</li><li>子集II</li><li>全排列II</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回溯算法&quot;&gt;&lt;a href=&quot;#回溯算法&quot; class=&quot;headerlink&quot; title=&quot;回溯算法&quot;&gt;&lt;/a&gt;回溯算法&lt;/h1&gt;&lt;p&gt;回溯算法是一种搜索的方法，在二叉树总结当中，经常使用到递归去解决相关的问题，在二叉树的&lt;strong&gt;所有路径&lt;/stron</summary>
      
    
    
    
    
    <category term="回溯" scheme="https://guoxiansen.github.io/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>二叉树相关总结</title>
    <link href="https://guoxiansen.github.io/2023/11/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
    <id>https://guoxiansen.github.io/2023/11/02/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</id>
    <published>2023-11-02T11:30:47.000Z</published>
    <updated>2023-11-21T07:08:43.632Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311021939061.png" alt="image-20231102193927953"></p><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="二叉树的理论基础"><a href="#二叉树的理论基础" class="headerlink" title="二叉树的理论基础"></a>二叉树的理论基础</h2><p>二叉树是结点的度数之和不超过2的树，二叉树总共有五种基本形态</p><p>二叉树的种类主要有</p><ul><li>满二叉树</li><li>完全二叉树</li></ul><p>二叉树的存储方式</p><ul><li>顺序存储</li><li>链式存储</li></ul><p>二叉树的遍历方式</p><ul><li>先序遍历（深度优先搜索）</li><li>中序遍历（深度优先搜索）</li><li>后序遍历（深度优先搜索）</li><li>层次遍历（广度优先搜索）</li></ul><p>对于二叉树结点的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val, left = <span class="literal">None</span>, right = <span class="literal">None</span></span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.left = left</span><br><span class="line">        self.right = right</span><br></pre></td></tr></table></figure><h2 id="二叉树的递归遍历"><a href="#二叉树的递归遍历" class="headerlink" title="二叉树的递归遍历"></a>二叉树的递归遍历</h2><h3 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">       <span class="keyword">return</span> [root.val] + self.preorderTraversal(root.left) + self.preorderTraversal(root.right)</span><br></pre></td></tr></table></figure><h3 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">       <span class="keyword">return</span> self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)</span><br></pre></td></tr></table></figure><h3 id="后续遍历"><a href="#后续遍历" class="headerlink" title="后续遍历"></a>后续遍历</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">       <span class="keyword">return</span> self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val] </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311022036965.png" alt="image-20231102203600726"></p><h2 id="二叉树的非递归遍历"><a href="#二叉树的非递归遍历" class="headerlink" title="二叉树的非递归遍历"></a>二叉树的非递归遍历</h2><h3 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h3><p>方法1：利用栈先进后出的性质，先把右孩子结点放入栈中，再将左孩子结点放入栈中，这样就可以先访问根节点， 在访问左孩子，最后访问右孩子了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="comment"># print(node)</span></span><br><span class="line">            res.append(node.val)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>方法2：按照中序遍历的算法，只需要将添加<code>append</code>操作放到前面去即可。但需要控制两个指针。</p><p>思路：沿着左子树一直往左下方走，左孩子不为空就一直进栈，同时将其值添加到res列表中。如果左孩子为空，则弹出栈顶元素，然后再访问该结点的右孩子，再重复上述的操作直到遍历结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">preorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = []</span><br><span class="line">        res = []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = stack.pop()</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><p>中序遍历参考先序遍历<strong>思路2</strong>，区别就是只需要<code>append</code>语句放到当<code>cur</code>指针为空的时候里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = []</span><br><span class="line">        res = []</span><br><span class="line">        cur = root</span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> cur:</span><br><span class="line">                stack.append(cur)</span><br><span class="line">                cur = cur.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = stack.pop()</span><br><span class="line">                res.append(cur.val)</span><br><span class="line">                cur = cur.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311022035056.png" alt="image-20231102203511759"></p><h3 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h3><p>思路：在进行先序遍历的时候，我们的思路是利用栈，首先访问根结点，然后将右子树添加到栈中，再将左子树添加到栈中，实现的效果是<strong>根左右</strong>的效果，而在进行后序遍历的时候，我们需要的的顺序是<strong>左右根</strong>，如果我们先序遍历算法中左右子树进栈的顺序修改之后，刚好可以得到我们后续遍历结果的逆序结果，最终的返回值设置为<code>res[::-1]</code>即为最终答案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Definition for a binary tree node.</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, val&#x3D;0, left&#x3D;None, right&#x3D;None):</span><br><span class="line">#         self.val &#x3D; val</span><br><span class="line">#         self.left &#x3D; left</span><br><span class="line">#         self.right &#x3D; right</span><br><span class="line">class Solution:</span><br><span class="line">    def postorderTraversal(self, root: Optional[TreeNode]) -&gt; List[int]:</span><br><span class="line">        if not root:</span><br><span class="line">            return []</span><br><span class="line">        stack &#x3D; [root]</span><br><span class="line">        res &#x3D; []</span><br><span class="line">        while stack:</span><br><span class="line">            node &#x3D; stack.pop()</span><br><span class="line">            # 根 右 左</span><br><span class="line">            res.append(node.val)</span><br><span class="line">            if node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">            if node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">        # 左 右 根</span><br><span class="line">        return res[::-1]</span><br></pre></td></tr></table></figure><h2 id="二叉树三种遍历算法的统一非递归算法"><a href="#二叉树三种遍历算法的统一非递归算法" class="headerlink" title="二叉树三种遍历算法的统一非递归算法"></a>二叉树三种遍历算法的统一非递归算法</h2><h2 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h2><p>层次遍历需要借助队列来实现，队列先进先出的特点可以很好的满足层次遍历按层遍历的需要。</p><p>代码模板（以力扣为标准）</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311021933135.png" alt="image-20231102193339525"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">levelOrder</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        stack = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            tmp = []</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(stack)):</span><br><span class="line">                node = stack.pop(<span class="number">0</span>)</span><br><span class="line">                tmp.append(node.val)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    stack.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    stack.append(node.right)</span><br><span class="line">            res.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311021936728.png" alt="image-20231102193628125"></p><p>二叉树的层次遍历可以衍生出非常多的变种题目。</p><ul><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/">102.二叉树的层序遍历(opens new window)</a></li><li><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/">107.二叉树的层次遍历II(opens new window)</a><ul><li>本题和层次遍历的区别就是只需要返回res列表的逆序即可。</li></ul></li><li><a href="https://leetcode.cn/problems/binary-tree-right-side-view/">199.二叉树的右视图(opens new window)</a></li><li><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/">637.二叉树的层平均值(opens new window)</a></li><li><a href="https://leetcode.cn/problems/n-ary-tree-level-order-traversal/">429.N叉树的层序遍历(opens new window)</a></li><li><a href="https://leetcode.cn/problems/find-largest-value-in-each-tree-row/">515.在每个树行中找最大值(opens new window)</a></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/">116.填充每个节点的下一个右侧节点指针(opens new window)</a></li><li><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/">117.填充每个节点的下一个右侧节点指针II(opens new window)</a></li><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">104.二叉树的最大深度(opens new window)</a></li><li><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/">111.二叉树的最小深度</a></li></ul><h3 id="199、二叉树的右视图"><a href="#199、二叉树的右视图" class="headerlink" title="199、二叉树的右视图"></a>199、二叉树的右视图</h3><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311031016316.png" alt="image-20231103101656058"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rightSideView</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        queue = [root]</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            tmp = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># tmp.append(node.val)</span></span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                tmp = node.val</span><br><span class="line">            res.append(tmp)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311031016068.png" alt="image-20231103101640796"></p><h3 id="111、二叉树的最小深度"><a href="#111、二叉树的最小深度" class="headerlink" title="111、二叉树的最小深度"></a>111、二叉树的最小深度</h3><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311060955485.png" alt="image-20231106095458959"></p><p>本题的解题思路与二叉树的最大深度大同小异，唯一的区别就是在循环中进行判断当前节点的左右孩子结点是否为空，如果为空，则直接返回depth即可，如果不为空就一直进行循环，最后再返回depth，代码的主体框架与层次遍历是一致的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 层次遍历</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        queue = [root]</span><br><span class="line">        depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            depth+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.right <span class="keyword">and</span> <span class="keyword">not</span> node.left:</span><br><span class="line">                    <span class="keyword">return</span> depth</span><br><span class="line">        <span class="keyword">return</span> depth</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311060957166.png" alt="层次遍历时间"></p><h2 id="二叉树的深度与高度"><a href="#二叉树的深度与高度" class="headerlink" title="二叉树的深度与高度"></a>二叉树的深度与高度</h2><p>二叉树的深度与高度有一些区别，其中二叉树中的深度是指从根结点到该节点的路径长度。高度是指从叶子结点到当前结点的路径长度。</p><p>结点的<strong>深度</strong>是从根结点开始<strong>自顶向下</strong>逐层累加的。</p><p>结点的<strong>高度</strong>是从叶子结点开始<strong>自底向上</strong>逐层累加的。</p><p>在力扣中有几道题目是与二叉树的深度相关，一般而言如果是需要求深度的，都采用先序遍历的方法，因为先序遍历先遍历根结点，然后遍历孩子结点就可以得出其深度。满足其自顶向下的特点。一般而言可以采用递归方法。</p><p>深度：先序遍历 | 层次遍历</p><p>高度：后续遍历</p><ul><li>104.二叉树的最大深度</li><li>559.n叉树的最大深度</li><li>111.二叉树的最小深度</li></ul><p>根结点的高度就是二叉树的最大深度。</p><h3 id="104、二叉树的最大深度"><a href="#104、二叉树的最大深度" class="headerlink" title="104、二叉树的最大深度"></a>104、二叉树的最大深度</h3><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131941621.png" alt="image-20231113191706720"></p><p>求最大深度，需要从根结点开始自定向下进行深度优先搜索DFS，因此采用先序遍历，采用递归的实现方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># 先序遍历求最大深度 根左右   深度是从根节点到最后  高度是从叶子结点到当前节点的高度</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_height = self.maxDepth(root.left)</span><br><span class="line">        right_height = self.maxDepth(root.right)</span><br><span class="line">        height = <span class="number">1</span> + <span class="built_in">max</span>(left_height,right_height)</span><br><span class="line">        <span class="keyword">return</span> height</span><br></pre></td></tr></table></figure><p>其中代码还可以精简为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(self.maxDepth(root.left),self.maxDepth(root.right))</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131940044.png" alt="image-20231113192723426"></p><h3 id="559、n叉树的最大深度"><a href="#559、n叉树的最大深度" class="headerlink" title="559、n叉树的最大深度"></a>559、n叉树的最大深度</h3><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131940525.png" alt="image-20231113192558344"></p><p>解题思路与二叉树的最大深度一致，唯一的区别就是通过for循环去遍历孩子结点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># Definition for a Node.</span></span><br><span class="line"><span class="string">class Node:</span></span><br><span class="line"><span class="string">    def __init__(self, val=None, children=None):</span></span><br><span class="line"><span class="string">        self.val = val</span></span><br><span class="line"><span class="string">        self.children = children</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxDepth</span>(<span class="params">self, root: <span class="string">&#x27;Node&#x27;</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        max_depth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> root.children:</span><br><span class="line">            max_depth = <span class="built_in">max</span>(max_depth,self.maxDepth(ch))</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+max_depth</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131940106.png" alt="image-20231113192704871"></p><h3 id="111、二叉树的最小深度-1"><a href="#111、二叉树的最小深度-1" class="headerlink" title="111、二叉树的最小深度"></a>111、二叉树的最小深度</h3><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131940290.png" alt="image-20231113192853117"></p><p>解题思路和求最大深度差不多，但是又有一个特殊情况，就是当二叉树为单分支的情况，即当出现某个节点的左孩子或者右孩子其中之一为空的时候，深度就要取最右孩子中的最大值了，否则就会结果为0+1。其余的情况就取最小值即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left_depth = self.minDepth(root.left)</span><br><span class="line">        right_depth = self.minDepth(root.right)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">or</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(left_depth,right_depth)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">min</span>(left_depth,right_depth)</span><br></pre></td></tr></table></figure><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><h3 id="110、平衡二叉树"><a href="#110、平衡二叉树" class="headerlink" title="110、平衡二叉树"></a>110、平衡二叉树</h3><p>平衡二叉树的定义是左右子树的高度之差不超过1的二叉树。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311131940948.png" alt="image-20231113193458877"></p><p>代码</p><p>定义一个获取结点高度的函数<code>get_height()</code>，如果当前结点为空，则返回0，然后分别获取该结点左孩子和右孩子的高度，如果左右孩子高度返回值是-1，则也返回-1，否则在判断左右子树高度之差是否大于1，如果大于1则也返回-1，如果左右子树高度之差小于1，则返回<code>1+max(left_height, right_height)</code>。主程序中，只需要判断对根节点进行判断<code>get_height(root)</code>是否为-1即可判断该二叉树是否是平衡二叉树。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isBalanced</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">get_height</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">            left_height = get_height(root.left)</span><br><span class="line">            <span class="keyword">if</span> left_height==-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            right_height = get_height(root.right)</span><br><span class="line">            <span class="keyword">if</span> right_height==-<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>(left_height-right_height)&gt;<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>+<span class="built_in">max</span>(left_height,right_height)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> <span class="keyword">if</span> get_height(root)!=-<span class="number">1</span> <span class="keyword">else</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141931314.png" alt="image-20231114193151177"></p><h3 id="二叉排序树"><a href="#二叉排序树" class="headerlink" title="二叉排序树"></a>二叉排序树</h3><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="116、翻转二叉树"><a href="#116、翻转二叉树" class="headerlink" title="116、翻转二叉树"></a>116、翻转二叉树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141348128.png" alt="image-20231114134848424"></p><p>由示例可以看出，本题实际上需要实现的功能是沿着中间的一个轴翻转这颗二叉树，其本质实际只需要将二叉树每个结点的左右子树进行翻转即可。</p><p>需要注意的是，本题不能采用中序遍历的方法，可以采用先序遍历或者后序遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">invertTree</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        self.invertTree(root.left)</span><br><span class="line">        self.invertTree(root.right)</span><br><span class="line">        root.left,root.right = root.right,root.left</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p>中序遍历的时候可能会对一些节点重复的调换导致错误。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141442054.png" alt="image-20231114144227076"></p><h2 id="101、对称二叉树"><a href="#101、对称二叉树" class="headerlink" title="101、对称二叉树"></a>101、对称二叉树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311031112657.png" alt="image-20231103111251882"></p><p>本题思路与翻转二叉树有点区别，翻转二叉树是直接对比左右孩子结点的值是否相等即可判断，而本题需要判断的是（例如在第三层中，判断根节点左孩子2的左孩子是否与根结点右孩子2的右孩子是否相等）对比的其实是外侧与外侧，内侧与内侧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSymmetric</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">compare</span>(<span class="params">left,right</span>):</span></span><br><span class="line">            <span class="keyword">if</span> left <span class="keyword">and</span> <span class="keyword">not</span> right: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> left <span class="keyword">and</span> right: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right: <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> left.val != right.val: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            out = compare(left.left,right.right)</span><br><span class="line">            inner = compare(left.right,right.left)</span><br><span class="line">            <span class="keyword">return</span> out <span class="keyword">and</span> inner</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> compare(root.left,root.right)</span><br></pre></td></tr></table></figure><h2 id="100、相同的树"><a href="#100、相同的树" class="headerlink" title="100、相同的树"></a>100、相同的树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141526042.png" alt="image-20231114152650867"></p><p>思路基本与对称二叉树一致，需要对两棵树的结点的值以及左右子树的值进行对比，如果不相同则返回，相等则继续递归，知道递归结束。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -&gt; bool:</span><br><span class="line">        if not p and not q: return True</span><br><span class="line">        elif not p or not q: return False</span><br><span class="line">        elif p.val!&#x3D;q.val: return False</span><br><span class="line"></span><br><span class="line">        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141527981.png" alt="image-20231114152707949"></p><h2 id="572、另一棵树的子树"><a href="#572、另一棵树的子树" class="headerlink" title="572、另一棵树的子树"></a>572、另一棵树的子树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141519990.png" alt="image-20231114151903739"></p><p>解题思路与相同的树一致，只需要遍历<code>root</code>这棵树的每个结点，然后再与<code>subRoot</code>进行判断是否是相同的树即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isSubtree</span>(<span class="params">self, root: Optional[TreeNode], subRoot: Optional[TreeNode]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">isSame</span>(<span class="params">s,t</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> s <span class="keyword">and</span> <span class="keyword">not</span> t:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> s <span class="keyword">or</span> <span class="keyword">not</span> t:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> s.val!=t.val:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> isSame(s.left,t.left) <span class="keyword">and</span> isSame(s.right,t.right)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 遍历root的所有结点与subRoot进行比较</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        stack = [root]</span><br><span class="line">        <span class="keyword">while</span> stack:</span><br><span class="line">            node = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> isSame(node,subRoot):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> node.left:</span><br><span class="line">                stack.append(node.left)</span><br><span class="line">            <span class="keyword">if</span> node.right:</span><br><span class="line">                stack.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141520178.png" alt="image-20231114152036046"></p><h2 id="222、完全二叉树的节点数量"><a href="#222、完全二叉树的节点数量" class="headerlink" title="222、完全二叉树的节点数量"></a>222、完全二叉树的节点数量</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311061044923.png" alt="image-20231106104412026"></p><p>解题思路1：可以直接按照普通二叉树的遍历进行记录总共多少个结点（前中后序遍历+层次遍历都可以解决这个问题），时间复杂度为 O(n)</p><p>（此方法没有利用完全二叉树的性质）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNodes</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + self.countNodes(root.left) + self.countNodes(root.right)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311061046621.png" alt="image-20231106104634852"></p><p>使用层次遍历</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNodes</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line">        queue = [root]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(queue)):</span><br><span class="line">                num+=<span class="number">1</span></span><br><span class="line">                node = queue.pop(<span class="number">0</span>)</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141934586.png" alt="image-20231114193418762"></p><p>解题思路2：利用完全二叉树的性质，如果是满二叉树结点的数量可以用2的深度-1次方 再 -1 来进行计算。时间复杂度为O(logn * logn)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNodes</span>(<span class="params">self, root: TreeNode</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        left = root.left</span><br><span class="line">        right = root.right</span><br><span class="line">        leftdepth = <span class="number">0</span></span><br><span class="line">        rightdepth = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> left:</span><br><span class="line">            leftdepth+=<span class="number">1</span></span><br><span class="line">            left=left.left</span><br><span class="line">        <span class="keyword">while</span> right:</span><br><span class="line">            rightdepth+=<span class="number">1</span></span><br><span class="line">            right=right.right</span><br><span class="line">        <span class="keyword">if</span> leftdepth==rightdepth:</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span>&lt;&lt;leftdepth)-<span class="number">1</span></span><br><span class="line">        leftnum = self.countNodes(root.left)</span><br><span class="line">        rightnum = self.countNodes(root.right)</span><br><span class="line">        <span class="keyword">return</span> leftnum+rightnum+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311061049909.png" alt="image-20231106104900697"></p><h2 id="257、二叉树的所有路径"><a href="#257、二叉树的所有路径" class="headerlink" title="257、二叉树的所有路径"></a>257、二叉树的所有路径</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141554968.png" alt="image-20231114155412077"></p><p>本题使用DFS与BFS均可解决。</p><p>使用DFS的时候需要注意在递归的过程中如果当前结点为空则不进行处理，不为空时才进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[str]:</span></span><br><span class="line">        <span class="comment"># 使用DFS解决</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_path</span>(<span class="params">node,path</span>):</span></span><br><span class="line">            <span class="comment"># node结点不为空</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                path+=<span class="built_in">str</span>(node.val)</span><br><span class="line">                <span class="comment"># 叶子结点</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                    paths.append(path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    path+=<span class="string">&quot;-&gt;&quot;</span></span><br><span class="line">                    find_path(node.left,path)</span><br><span class="line">                    find_path(node.right,path)</span><br><span class="line">        paths = []</span><br><span class="line">        find_path(root,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141605715.png" alt="image-20231114160516588"></p><p>使用BFS解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">binaryTreePaths</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[str]:</span></span><br><span class="line">        <span class="comment"># 使用BFS 层次遍历</span></span><br><span class="line">        paths = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> paths</span><br><span class="line">        </span><br><span class="line">        queue = [root]</span><br><span class="line">        path_lst = [<span class="built_in">str</span>(root.val)]</span><br><span class="line">        <span class="keyword">while</span> queue:</span><br><span class="line">            node = queue.pop(<span class="number">0</span>)</span><br><span class="line">            path = path_lst.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                paths.append(path)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> node.left:</span><br><span class="line">                    queue.append(node.left)</span><br><span class="line">                    path_lst.append(path+<span class="string">&quot;-&gt;&quot;</span>+<span class="built_in">str</span>(node.left.val))</span><br><span class="line">                <span class="keyword">if</span> node.right:</span><br><span class="line">                    queue.append(node.right)</span><br><span class="line">                    path_lst.append(path+<span class="string">&quot;-&gt;&quot;</span>+<span class="built_in">str</span>(node.right.val))</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141625644.png" alt="image-20231114162537557"></p><h2 id="113、路径总和II"><a href="#113、路径总和II" class="headerlink" title="113、路径总和II"></a>113、路径总和II</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141607596.png" alt="image-20231114160701463"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pathSum</span>(<span class="params">self, root: Optional[TreeNode], targetSum: <span class="built_in">int</span></span>) -&gt; List[List[int]]:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_path</span>(<span class="params">node,path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                <span class="comment"># path+=[node.val]</span></span><br><span class="line">                path=path+[node.val]</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">sum</span>(path)==targetSum:</span><br><span class="line"></span><br><span class="line">                        paths.append(path)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    find_path(node.left,path)</span><br><span class="line">                    find_path(node.right,path)</span><br><span class="line">        paths = []</span><br><span class="line">        find_path(root,[])</span><br><span class="line">        <span class="keyword">return</span> paths</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141618342.png" alt="image-20231114161838454"></p><p>这里需要注意一个问题，就是<code>path+=[node.val]</code>和<code>path=path+[node.val]</code>这两句代码的写法有点不同，+=是在原来的path上进行修改，而直接赋值是可以形成一个新的列表，在递归的过程中就出现一个新的列表。这是由于python中列表是可变类型的，如果列表也是和字符串一样属于不可变类型的话，就可以直接使用+=操作了。</p><h2 id="988、从叶结点开始的最小字符串"><a href="#988、从叶结点开始的最小字符串" class="headerlink" title="988、从叶结点开始的最小字符串"></a>988、从叶结点开始的最小字符串</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141700936.png" alt="image-20231114170051688"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141701926.png" alt="image-20231114170117467"></p><p>本题思路与二叉树的所有路径思路一致，只需要在其中添加一个用来进行比较的变量即可，注意这里所说的变量不可以是字符串，因为字符串是不可修改的。这里也需要注意是从叶子结点开始的，所以最终求得的路径path需要进行逆序处理[::-1]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">smallestFromLeaf</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; str:</span></span><br><span class="line">        <span class="comment"># print(myhash)</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">find_path</span>(<span class="params">node,path</span>):</span></span><br><span class="line">            <span class="keyword">if</span> node:</span><br><span class="line">                path+=<span class="built_in">str</span>(myhash[node.val])</span><br><span class="line">                <span class="comment"># print(node.val,path)</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> node.left <span class="keyword">and</span> <span class="keyword">not</span> node.right:</span><br><span class="line">                    minleaf[<span class="number">0</span>] = <span class="built_in">min</span>(minleaf[<span class="number">0</span>],path[::-<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    find_path(node.left,path)</span><br><span class="line">                    find_path(node.right,path)</span><br><span class="line">        myhash = &#123;i: <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)&#125;</span><br><span class="line">        minleaf = [<span class="string">&quot;z&quot;</span>*<span class="number">8500</span>]</span><br><span class="line">        find_path(root,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> minleaf[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311141702599.png" alt="image-20231114170241494"></p><h2 id="404、左叶子之和"><a href="#404、左叶子之和" class="headerlink" title="404、左叶子之和"></a>404、左叶子之和</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311142043922.png" alt="image-20231114204344749"></p><p>思路：</p><p>本题采用DFS的方式去解决。需要注意到底什么是左叶子，左叶子是指该节点不为空，同时其左右孩子为空，通过递归的方式去寻找这样的结点，然后对其求和。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumOfLeftLeaves</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># 递归程序如果碰到结点为空则返回0</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 如果该节点没有左右孩子 也返回</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.right:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="comment"># 遍历左子树</span></span><br><span class="line">        left_num = self.sumOfLeftLeaves(root.left)</span><br><span class="line">        <span class="comment"># 如果有左孩子并且孩子为叶子结点则进行统计</span></span><br><span class="line">        <span class="keyword">if</span> root.left <span class="keyword">and</span> <span class="keyword">not</span> root.left.left <span class="keyword">and</span> <span class="keyword">not</span> root.left.right:</span><br><span class="line">            left_num = root.left.val</span><br><span class="line">        right_num = self.sumOfLeftLeaves(root.right)</span><br><span class="line">        <span class="keyword">return</span> left_num + right_num</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311161713500.png" alt="image-20231116171305355"></p><h2 id="236、二叉树的最近公共祖先"><a href="#236、二叉树的最近公共祖先" class="headerlink" title="236、二叉树的最近公共祖先"></a>236、二叉树的最近公共祖先</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311161714944.png" alt="image-20231116171451621"></p><p>从下往上对结点进行处理，采用后序遍历的方法，先左再右再中</p><p>情况1： p和q都为某个节点的孩子结点</p><p>情况2：p是q的父节点或者q是p的父节点</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">lowestCommonAncestor</span>(<span class="params">self, root: <span class="string">&#x27;TreeNode&#x27;</span>, p: <span class="string">&#x27;TreeNode&#x27;</span>, q: <span class="string">&#x27;TreeNode&#x27;</span></span>) -&gt; &#x27;TreeNode&#x27;:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">if</span> root==q <span class="keyword">or</span> root==p:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        left = self.lowestCommonAncestor(root.left,p,q)</span><br><span class="line">        right = self.lowestCommonAncestor(root.right,p,q)</span><br><span class="line">        <span class="keyword">if</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> left <span class="keyword">and</span> right:</span><br><span class="line">            <span class="keyword">return</span> right</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> right <span class="keyword">and</span> left:</span><br><span class="line">            <span class="keyword">return</span> left</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> left <span class="keyword">and</span> <span class="keyword">not</span> right:</span><br><span class="line">            <span class="keyword">return</span> left</span><br></pre></td></tr></table></figure><h2 id="106、从中序和后序遍历序列构造二叉树"><a href="#106、从中序和后序遍历序列构造二叉树" class="headerlink" title="106、从中序和后序遍历序列构造二叉树"></a>106、从中序和后序遍历序列构造二叉树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171658001.png" alt="image-20231117165833569"></p><p>思路：</p><p>首先在后序遍历序列中找到根结点，然后创建一个根节点</p><p>找到切割的位置</p><ul><li><p>对先序序列进行切割，分为左子树和右子树</p></li><li><p>对后序序列进行切割，分为左子树和右子树</p></li><li><p>构造根节点的左子树，使用递归的方法，传递进去的参数是先序数组的左边和中序数组的左边</p></li><li><p>构造根节点的右子树，使用递归的方法，传递进去的参数是先序数组的右边和中序数组的右边</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildTree</span>(<span class="params">self, inorder: List[<span class="built_in">int</span>], postorder: List[<span class="built_in">int</span>]</span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> postorder:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找到根结点</span></span><br><span class="line">        root_val = postorder[-<span class="number">1</span>]</span><br><span class="line">        root = TreeNode(root_val)</span><br><span class="line">        <span class="comment"># 找到切割位置</span></span><br><span class="line">        qiege = inorder.index(root_val)</span><br><span class="line"></span><br><span class="line">        inorder_left = inorder[:qiege]</span><br><span class="line">        inorder_right = inorder[qiege+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        postorder_left = postorder[:<span class="built_in">len</span>(inorder_left)]</span><br><span class="line">        postorder_right = postorder[<span class="built_in">len</span>(inorder_left):<span class="built_in">len</span>(postorder)-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        root.left = self.buildTree(inorder_left,postorder_left)</span><br><span class="line">        root.right = self.buildTree(inorder_right,postorder_right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="654、最大二叉树"><a href="#654、最大二叉树" class="headerlink" title="654、最大二叉树"></a>654、最大二叉树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171926482.png" alt="image-20231117192616419"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171926733.png" alt="image-20231117192638755"></p><p>思路：使用递归的方式</p><p>首先根据最大值对该数组进行切割，切割完毕后，根据数组的左边与右边分别进行递归，这类似于106从中序和后序遍历序列构造二叉树。最终返回构造好的二叉树root。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">constructMaximumBinaryTree</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(nums[<span class="number">0</span>])</span><br><span class="line">        root_val = <span class="built_in">max</span>(nums)</span><br><span class="line">        root = TreeNode(root_val)</span><br><span class="line"></span><br><span class="line">        qiege = nums.index(root_val)</span><br><span class="line">        nums_left = nums[:qiege]</span><br><span class="line">        nums_right = nums[qiege+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">        root.left = self.constructMaximumBinaryTree(nums_left)</span><br><span class="line">        root.right = self.constructMaximumBinaryTree(nums_right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171928921.png" alt="image-20231117192833812"></p><h2 id="998、最大二叉树II"><a href="#998、最大二叉树II" class="headerlink" title="998、最大二叉树II"></a>998、最大二叉树II</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171929018.png" alt="image-20231117192902002"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171929352.png" alt="image-20231117192919398"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171929719.png" alt="image-20231117192933861"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311171929329.png" alt="image-20231117192954360"></p><p>本题和上一题相比，难点就在于可能需要对这颗二叉树进行重新构造，但是在构造的过程中也有省事的地方，就是只需要往右插入。如果<code>val</code>值大于原树的根节点值，则直接将原树放在<code>val</code>结点的左子树即可。如果小于最大值，向右子树进行遍历，同时记录当前结点的父节点，方便<code>val</code>结点的插入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoMaxTree</span>(<span class="params">self, root: Optional[TreeNode], val: <span class="built_in">int</span></span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        node = TreeNode(val)</span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        cur = root</span><br><span class="line">        <span class="comment"># 遍历root 往右子树遍历</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> cur.val&gt;val:</span><br><span class="line">            <span class="comment"># 记录当前结点的父节点</span></span><br><span class="line">            prev = cur</span><br><span class="line">            cur = cur.right</span><br><span class="line">        <span class="comment"># 如果val大于原树的最大值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> prev:</span><br><span class="line">            node.left = cur</span><br><span class="line">            <span class="keyword">return</span> node</span><br><span class="line">        <span class="comment"># 遍历到了右子树合适的位置 换结点</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># </span></span><br><span class="line">            prev.right = node</span><br><span class="line">            node.left = cur</span><br><span class="line">            <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><h2 id="98、验证二叉搜索树（二叉排序树BST）"><a href="#98、验证二叉搜索树（二叉排序树BST）" class="headerlink" title="98、验证二叉搜索树（二叉排序树BST）"></a>98、验证二叉搜索树（二叉排序树BST）</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311172201462.png" alt="image-20231117220106841"></p><p>本题思路很简单，利用二叉排序树的性质即可：二叉排序树中序遍历的结果是递增的。</p><p>方法：</p><ul><li>采用非递归遍历算法  设置最小值 在中序递归的过程中进行比较</li><li>采用迭代法，设置最小值，如果出现不满足性质的节点直接返回False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 递归遍历算法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 添加一个最小值 每次进行比较的时候更新最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.min_= <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="comment"># 左</span></span><br><span class="line">        left = self.isValidBST(root.left)</span><br><span class="line">        <span class="comment"># 根</span></span><br><span class="line">        <span class="keyword">if</span> self.min_ &lt; root.val:</span><br><span class="line">            self.min_ = root.val</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 右</span></span><br><span class="line">        right = self.isValidBST(root.right)</span><br><span class="line">        <span class="keyword">return</span> left <span class="keyword">and</span> right</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311172204241.png" alt="image-20231117220442215"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 非递归遍历算法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValidBST</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 中序遍历 判断值是否小于等于</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        stack = []</span><br><span class="line">        p = root</span><br><span class="line">        min_ = <span class="built_in">float</span>(<span class="string">&quot;-inf&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                stack.append(p)</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = stack.pop()</span><br><span class="line">                <span class="comment"># print(min_,p.val)</span></span><br><span class="line">                <span class="keyword">if</span> min_ &lt; p.val:</span><br><span class="line">                    min_ = p.val</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                p = p.right</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311172204453.png" alt="image-20231117220417506"></p><h2 id="501、二叉搜索树中的众数"><a href="#501、二叉搜索树中的众数" class="headerlink" title="501、二叉搜索树中的众数"></a>501、二叉搜索树中的众数</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311182037439.png" alt="image-20231118203749353"></p><p>思路：</p><p>对二叉树进行中序遍历，遍历的过程中统计字符出现的最大次数。其中在递归的过程中需要将<code>max_freq</code>指定为全局变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        max_freq = <span class="number">0</span></span><br><span class="line">        myhash = &#123;&#125;</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> max_freq</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            dfs(root.left)</span><br><span class="line">            myhash[root.val] = myhash.get(root.val,<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">            max_freq = <span class="built_in">max</span>(max_freq, myhash[root.val])</span><br><span class="line">            dfs(root.right)</span><br><span class="line">        dfs(root)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> [k <span class="keyword">for</span> k,v <span class="keyword">in</span> myhash.items() <span class="keyword">if</span> v==max_freq]</span><br></pre></td></tr></table></figure><p>结果</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311182037815.png" alt="image-20231118203735546"></p><ul><li>使用迭代法的中序遍历同时不使用字典来统计出现的频率</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMode</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="comment"># 使用迭代法的中序遍历</span></span><br><span class="line">        stack = []</span><br><span class="line">        p = root</span><br><span class="line">        pre = <span class="literal">None</span></span><br><span class="line">        freq = <span class="number">0</span></span><br><span class="line">        max_freq = <span class="number">0</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> p:</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                stack.append(p)</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = stack.pop()</span><br><span class="line">                <span class="keyword">if</span> pre <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                    freq = <span class="number">1</span></span><br><span class="line">                <span class="keyword">elif</span> pre.val == p.val:</span><br><span class="line">                    freq+=<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    freq = <span class="number">1</span></span><br><span class="line">                <span class="comment"># 如果频率和最大频率相等 则往结果数组中添加</span></span><br><span class="line">                <span class="keyword">if</span> freq==max_freq:</span><br><span class="line">                    res.append(p.val)</span><br><span class="line">                <span class="keyword">if</span> freq &gt; max_freq:</span><br><span class="line">                    res = [p.val]</span><br><span class="line">                    max_freq = freq</span><br><span class="line">                pre = p</span><br><span class="line">                p = p.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>这个方法的核心是用<code>freq</code>和<code>max_freq</code>进行比较，同时使用<code>pre</code>指针指向前一个结点，这样就方便在中旬遍历的过程中记录已经出现的结点值了。有如下几种情况：</p><ul><li>针对<code>pre</code><ul><li>如果<code>pre</code>为<code>None</code>，则更新<code>freq</code>=1</li><li>如果<code>pre</code>不为<code>None</code>且<code>pre</code>的值与<code>p</code>的值相等，则将<code>freq</code>+1</li><li>如果<code>pre</code>不为<code>None</code>且<code>pre</code>的值与``p<code>不相等，仍然将</code>freq`=1</li></ul></li><li>针对<code>freq</code>和<code>max_freq</code><ul><li>如果<code>freq==max_freq</code>，则往返回值的列表中添加该元素（p.val 即结果的众数）</li><li>如果<code>freq&gt;max_freq</code>，则对res列表进行更新，同时更新<code>max_freq</code></li><li>如果<code>freq&lt;max_freq</code>，可以不进行任何处理</li></ul></li></ul><h2 id="701、二叉搜索树中的插入"><a href="#701、二叉搜索树中的插入" class="headerlink" title="701、二叉搜索树中的插入"></a>701、二叉搜索树中的插入</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311201059012.png" alt="image-20231120105950581"></p><p>遍历二叉树直到该值应该出现的地方为止，利用二叉搜索树的性质，如果根节点的值小于value，则再右子树进行递归，否则在左子树进行递归。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insertIntoBST</span>(<span class="params">self, root: Optional[TreeNode], val: <span class="built_in">int</span></span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="comment"># 根</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(val)</span><br><span class="line">        <span class="keyword">if</span> root.val&gt;val:</span><br><span class="line">            root.left = self.insertIntoBST(root.left,val)</span><br><span class="line">        <span class="keyword">if</span> root.val &lt; val:</span><br><span class="line">            root.right = self.insertIntoBST(root.right,val)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311201101896.png" alt="image-20231120110120885"></p><h2 id="450、二叉搜索树中的删除"><a href="#450、二叉搜索树中的删除" class="headerlink" title="450、二叉搜索树中的删除"></a>450、二叉搜索树中的删除</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311201044219.png" alt="image-20231120104451186"></p><p>题目中要求的返回值是<strong>二叉搜索树中可能被更新的根结点的引用</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteNode</span>(<span class="params">self, root: Optional[TreeNode], key: <span class="built_in">int</span></span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> root</span><br><span class="line">        <span class="keyword">if</span> root.val==key:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.right <span class="keyword">and</span> <span class="keyword">not</span> root.left:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> root.left:</span><br><span class="line">                <span class="keyword">return</span> root.right</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> root.right:</span><br><span class="line">                <span class="keyword">return</span> root.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cur = root.right</span><br><span class="line">                <span class="keyword">while</span> cur.left <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                    cur = cur.left</span><br><span class="line">                cur.left = root.left</span><br><span class="line">                <span class="keyword">return</span> root.right</span><br><span class="line">        <span class="keyword">elif</span> root.val &gt; key:</span><br><span class="line">            root.left =  self.deleteNode(root.left,key)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            root.right = self.deleteNode(root.right,key)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311201058168.png" alt="image-20231120105811069"></p><h2 id="108、将有序数组转化为二叉搜索树"><a href="#108、将有序数组转化为二叉搜索树" class="headerlink" title="108、将有序数组转化为二叉搜索树"></a>108、将有序数组转化为二叉搜索树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211024882.png" alt="image-20231121102406870"></p><p>思路：本题思路类似于从106、中序和后序遍历构序列构造二叉树和654、最大二叉树的解题思路，需要找到中间的切割点，然后通过递归的方式分别构造左右子树，需要注意的就是对于递归的结束条件的处理如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> TreeNode(nums[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>一共两种情况，因为再往下就涉及到数组的切割问题。</p><ul><li>如果数组为空，则直接返回None</li><li>如果数组的长度为1，则直接返回以数组中唯一元素构造出二叉树结点即可</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sortedArrayToBST</span>(<span class="params">self, nums: List[<span class="built_in">int</span>]</span>) -&gt; Optional[TreeNode]:</span></span><br><span class="line">        <span class="comment"># 本题思路就是通过数组来构造一颗二叉树，需要保持树的平衡，方法将就是从中间进行构造</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nums:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(nums)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> TreeNode(nums[<span class="number">0</span>])</span><br><span class="line">        qiege = <span class="built_in">len</span>(nums)//<span class="number">2</span></span><br><span class="line">        <span class="comment"># print(qiege)</span></span><br><span class="line">        root = TreeNode(nums[qiege])</span><br><span class="line">        nums_left = nums[:qiege]</span><br><span class="line">        nums_right = nums[qiege+<span class="number">1</span>:]</span><br><span class="line">        root.left = self.sortedArrayToBST(nums_left)</span><br><span class="line">        root.right = self.sortedArrayToBST(nums_right)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211031663.png" alt="image-20231121103147381"></p><h2 id="538、把二叉搜索树转换为累加树"><a href="#538、把二叉搜索树转换为累加树" class="headerlink" title="538、把二叉搜索树转换为累加树"></a>538、把二叉搜索树转换为累加树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211432312.png" alt="image-20231121143208244"></p><p>针对二叉搜索树的题目，一定要好好利用其中序遍历得到的是一个递增的序列这一性质！！！</p><p>思路：根据题目的要求，本题中的树是二叉搜索树，在中序遍历的过程中是递增的，但是要求实现的是将node节点的的值修改为大于等于该节点值的所有节点值的和。因此我们可以采用逆序中序遍历的方法，逆序中序遍历中的结点值与当前结点的结点值相加起来，得到该结点现在的值。</p><p>需要注意的是，使用Python的时候，局部变量的问题，也就是我们pre指向前一个结点值，我们需要用<code>nonlocal</code> pre来申明<code>pre</code>不是局部变量，这样在递归的过程中才能够访问到外层嵌套函数中定义的<code>pre</code>值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bstToGst</span>(<span class="params">self, root: TreeNode</span>) -&gt; TreeNode:</span></span><br><span class="line">                <span class="comment"># 使用右中左的遍历顺序进行遍历 往前叠加值</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">nonlocal</span> pre</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> </span><br><span class="line">            dfs(root.right)</span><br><span class="line">            root.val += pre</span><br><span class="line">            pre = root.val</span><br><span class="line">            dfs(root.left)</span><br><span class="line">        pre = <span class="number">0</span></span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> root        </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211431170.png" alt="image-20231121143137935"></p><h2 id="1038、从二叉搜索树到更大的和树"><a href="#1038、从二叉搜索树到更大的和树" class="headerlink" title="1038、从二叉搜索树到更大的和树"></a>1038、从二叉搜索树到更大的和树</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211426480.png" alt="image-20231121142641537"></p><p>本题与上一题思路一样，不再重复赘述。</p><h2 id="530、二叉树的最小绝对值差"><a href="#530、二叉树的最小绝对值差" class="headerlink" title="530、二叉树的最小绝对值差"></a>530、二叉树的最小绝对值差</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211435843.png" alt="image-20231121143459700"></p><p>思路：本题的树是二叉搜索树，根据其性质可以进行中序遍历，然后在得到的遍历序列中求最小绝对差</p><p>方法1 递归方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinimumDifference</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span>(<span class="params">root</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span> []</span><br><span class="line">            <span class="keyword">return</span> dfs(root.left) + [root.val] + dfs(root.right)</span><br><span class="line">        nums = dfs(root)</span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>):</span><br><span class="line">            res = <span class="built_in">min</span>(<span class="built_in">abs</span>(nums[i]-nums[i+<span class="number">1</span>]),res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>方法2 迭代方法</p><p>在迭代法中，需要用pre记录前一个节点的指针，其初始值可以设置为任意值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMinimumDifference</span>(<span class="params">self, root: Optional[TreeNode]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># 使用中序遍历 然后求差值</span></span><br><span class="line">        stack = []</span><br><span class="line">        p = root</span><br><span class="line">        pre = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">        res = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line">        <span class="keyword">while</span> p <span class="keyword">or</span> stack:</span><br><span class="line">            <span class="keyword">if</span> p:</span><br><span class="line">                stack.append(p)</span><br><span class="line">                p = p.left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                p = stack.pop()</span><br><span class="line">                res = <span class="built_in">min</span>(<span class="built_in">abs</span>(pre-p.val),res)</span><br><span class="line">                pre = p.val</span><br><span class="line">                p = p.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311211504802.png" alt="image-20231121150414365"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202311021939061.png&quot; alt=&quot;image-20231102193927953&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;二叉树&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="二叉树" scheme="https://guoxiansen.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux SRv6实验</title>
    <link href="https://guoxiansen.github.io/2023/10/31/Linux-SRv6%E5%AE%9E%E9%AA%8C/"/>
    <id>https://guoxiansen.github.io/2023/10/31/Linux-SRv6%E5%AE%9E%E9%AA%8C/</id>
    <published>2023-10-31T11:12:20.000Z</published>
    <updated>2023-10-31T11:55:53.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SRv6实验"><a href="#SRv6实验" class="headerlink" title="SRv6实验"></a>SRv6实验</h1><p><strong>摘要：</strong>本文基于Linux SRv6功能，结合Mininet、Quagga、Python等工具，验证SRv6的一系列功能，包括VPN、流量工程、服务链等。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>Linux （推荐Ubuntu20.04）</li><li>最新版Mininet</li><li>Quagga（在Mininet虚拟拓扑下，提供路由器的静态路由/OSPF/BGP等路由协议支持）</li><li>Python（通过脚本建立测试拓扑及初试配置）</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Quagga安装"><a href="#Quagga安装" class="headerlink" title="Quagga安装"></a>Quagga安装</h3><p>下载地址</p><p><a href="https://src.fedoraproject.org/repo/pkgs/quagga/">https://src.fedoraproject.org/repo/pkgs/quagga/</a></p><p>下载Quagga1.2.4版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://src.fedoraproject.org/repo/pkgs/quagga/quagga-1.2.4.tar.gz/sha512/3e72440bcccfd3c1a449a62b7ff8623441256399a2bee0a39fa0a19694a5a78ac909c5c2128a24735bc034ea8b0811827293b480a2584a3a4c8ae36be9cf1fcd/quagga-1.2.4.tar.gz</span><br></pre></td></tr></table></figure><p><img src="D:\博客\Hexo\source_posts\images\image-20231031193027677.png" alt="image-20231031193027677"></p><p>安装命令1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-vtysh --enable-user=root --enable-group=root --enable-vty-group=root</span><br></pre></td></tr></table></figure><p>报错</p><p><img src="D:\博客\Hexo\source_posts\images\image-20231031193527408.png" alt="image-20231031193527408"></p><p>解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gawk</span><br></pre></td></tr></table></figure><p>重复执行安装命令，继续报错，再来解决</p><p><img src="D:\博客\Hexo\source_posts\images\image-20231031194106531.png" alt="image-20231031194106531"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libreadline6-dev</span><br></pre></td></tr></table></figure><p>重复执行安装命令，继续报错，缺少相应的cares资源文件，再来解决</p><p><img src="D:\博客\Hexo\source_posts\images\image-20231031194011218.png" alt="image-20231031194011218"></p><p>下载文件包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://c-ares.org/download/c-ares-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><p>下载好之后解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ./c-ares-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><p>进入文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd c-ares-1.12.0</span><br><span class="line">./configure</span><br></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp libcares.pc /usr/local/lib/pkgconfig</span><br><span class="line">PKG_CONFIG_PATH=/usr/local/lib/pkgconfig</span><br><span class="line">export PKG_CONFIG_PATH </span><br><span class="line"><span class="meta">#</span><span class="bash"> 用第三方库，就少不了要使用到第三方的头文件和库文件。我们在编译、链接的时候，必须要指定这些头文件和库文件的位置。</span></span><br></pre></td></tr></table></figure><p>再次执行命令1，安装无误</p><p><img src="D:\博客\Hexo\source_posts\images\image-20231031195401751.png" alt="image-20231031195401751"></p><p>在Quagga目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><p><img src="D:\博客\Hexo\source_posts\images\image-20231031195522998.png" alt="image-20231031195522998"></p><h3 id="iproute2安装"><a href="#iproute2安装" class="headerlink" title="iproute2安装"></a>iproute2安装</h3><h2 id="参考Reference"><a href="#参考Reference" class="headerlink" title="参考Reference"></a>参考Reference</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SRv6实验&quot;&gt;&lt;a href=&quot;#SRv6实验&quot; class=&quot;headerlink&quot; title=&quot;SRv6实验&quot;&gt;&lt;/a&gt;SRv6实验&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;本文基于Linux SRv6功能，结合Mininet、Quagga、</summary>
      
    
    
    
    
    <category term="SDN" scheme="https://guoxiansen.github.io/tags/SDN/"/>
    
  </entry>
  
  <entry>
    <title>位运算</title>
    <link href="https://guoxiansen.github.io/2023/10/21/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://guoxiansen.github.io/2023/10/21/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2023-10-21T01:53:48.000Z</published>
    <updated>2023-10-30T08:35:54.741Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310210959834.png" alt="image-20231021095935123"></p><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><p>首先介绍一下常见位运算的符号（通常在各个编程语言中位运算的符号都是相似的）</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与运算，参与运算的两个值如果二进制对应位置都为1结果为1，否则为0</td></tr><tr><td>|</td><td>按位或运算，参与运算的两个值如果二进制对应位置有一个为1结果为1，两个均为0结果才为0</td></tr><tr><td>^</td><td>按位异或运算，当两个二进制位置对应位置不同时，结果为1，否则为0</td></tr><tr><td>~</td><td>按位取反运算，对数据的每个二进制位置取反，把0变为1，把1变为0</td></tr><tr><td>&lt;&lt;</td><td>左移运算符：运算数的各位二进制全部左移若干位，由&lt;&lt;符号右边的数字决定左移多少位，高位丢弃，低位自动补0</td></tr><tr><td>&gt;&gt;</td><td>右移运算符：运算数的各位二进制全部右移若干位，由&gt;&gt;符号右边的数字决定右移多少位。</td></tr></tbody></table><p>位运算在力扣中有很多题目的应用，位运算通常都是常数级别的时间复杂度</p><ol><li><strong>按位与（&amp;）</strong>、<strong>按位或（|）</strong>、<strong>按位异或（^）</strong>等基本位运算的时间复杂度是 O(1)，它们在一个常数时间内完成。</li><li><strong>位左移（&lt;&lt;）**和**位右移（&gt;&gt;）</strong>运算的时间复杂度也是 O(1)，因为它们只是在二进制数的表示上进行了移位操作。</li></ol><h2 id="2135-统计追加字母可以获得的单词"><a href="#2135-统计追加字母可以获得的单词" class="headerlink" title="2135.统计追加字母可以获得的单词"></a>2135.统计追加字母可以获得的单词</h2><h3 id="我第一次解法"><a href="#我第一次解法" class="headerlink" title="我第一次解法"></a>我第一次解法</h3><p>整体思路如下：</p><ol><li>首先将startWords中的单词全部转换为一个集合存放在一个列表中</li><li>将targetWords中的单词也全部转换为集合存放在列表中</li><li>通过两层for循环来遍历所有在target中的单词，和start中的单词集合元素取不同时包含在st集合与ta集合中的元素且要满足ta的长度-1等于st的长度，这样就可以确保由st中的单词随机添加一个就可以构成ta中的单词了</li><li>如果满足条件，将res+1，然后break掉，判断下一个单词是否可以由st中的单词获得</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCount</span>(<span class="params">self, startWords: List[<span class="built_in">str</span>], targetWords: List[<span class="built_in">str</span>]</span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        start = [<span class="built_in">set</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> startWords]</span><br><span class="line">        <span class="comment"># print(&quot;start&quot;,start)</span></span><br><span class="line">        target = [<span class="built_in">set</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> targetWords]</span><br><span class="line">        <span class="comment"># print(&quot;target&quot;,target)</span></span><br><span class="line">        <span class="keyword">for</span> ta <span class="keyword">in</span> target:</span><br><span class="line">            <span class="keyword">for</span> st <span class="keyword">in</span> start:</span><br><span class="line">                <span class="comment"># print(&quot;ta=&#123;&#125;,st=&#123;&#125;&quot;.format(ta,st))</span></span><br><span class="line">                <span class="comment"># if 0&lt;=len((ta-st))&lt;=1 and len((st-ta))==0:</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(st^ta)==<span class="number">1</span> <span class="keyword">and</span> <span class="built_in">len</span>(ta)-<span class="number">1</span>==<span class="built_in">len</span>(st):</span><br><span class="line">                    <span class="comment"># print(st)</span></span><br><span class="line">                    res+=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><p>由于当startWords和targetWords中的单词可能会特别长，在理论上集合最长的情况下，集合取各种关系的时候需要重复遍历整个集合，容易造成很大的时间开销，因此我这个代码在部分测试用例的时候可以通过，整体不能通过</p><h3 id="位运算-哈希表解法"><a href="#位运算-哈希表解法" class="headerlink" title="位运算+哈希表解法"></a>位运算+哈希表解法</h3><p>官方给出的解法是可以使用位运算，我看了下源代码，就是在我用集合进行比较的地方将其换成位运算操作能够极大的减少时间开销。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wordCount</span>(<span class="params">self, startWords: List[<span class="built_in">str</span>], targetWords: List[<span class="built_in">str</span>]</span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># s是一个用于存放startWords中的元素的哈希表，查询速度为O(1)</span></span><br><span class="line">        s = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> startWords:</span><br><span class="line">            mask = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> ch <span class="keyword">in</span> word:</span><br><span class="line">                <span class="comment"># 按位或运算 只要对应的二进制有一个为1那么结果就为1，这样就把一个单词中的所有字符用掩码的形式表示出来了</span></span><br><span class="line">                mask |= <span class="number">1</span> &lt;&lt; (<span class="built_in">ord</span>(ch) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="comment"># 将每个单词的掩码存放在一个哈希表中</span></span><br><span class="line">            s.add(mask)</span><br><span class="line">        <span class="comment"># print(&quot;startword中的mask&quot;,s)</span></span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> targetWords:</span><br><span class="line">            mask = <span class="number">0</span></span><br><span class="line">            <span class="comment"># print(&quot;word&quot;,word)</span></span><br><span class="line">            <span class="comment"># 计算整个单词的掩码</span></span><br><span class="line">            <span class="keyword">for</span> ch <span class="keyword">in</span> word:</span><br><span class="line">                mask |= <span class="number">1</span> &lt;&lt; (<span class="built_in">ord</span>(ch) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">            <span class="comment"># 遍历单词，在去掉单词的每个字符的情况下，对比是否在哈希表中，如果在则将结果+1并break出来，</span></span><br><span class="line">            <span class="keyword">for</span> ch <span class="keyword">in</span> word:</span><br><span class="line">                <span class="keyword">if</span> mask ^ (<span class="number">1</span> &lt;&lt; (<span class="built_in">ord</span>(ch) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))) <span class="keyword">in</span> s:  <span class="comment"># 去掉这个字符</span></span><br><span class="line">                    ans += <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure><p>备注：<code>ord()</code>是Python内置方法，用于求一个字符的unicode编码</p><h2 id="371-两整数之和"><a href="#371-两整数之和" class="headerlink" title="371.两整数之和"></a>371.两整数之和</h2><p>给你两个整数<code>a</code>和<code>b</code>，不使用运算符<code>+</code>和<code>-</code>，计算并返回两整数之和。</p><p>思路</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310301635268.png" alt="image-20231026203400843"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310210959834.png&quot; alt=&quot;image-20231021095935123&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;位运算&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://guoxiansen.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Python实现单链表（带头结点）</title>
    <link href="https://guoxiansen.github.io/2023/10/20/Python%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%EF%BC%89/"/>
    <id>https://guoxiansen.github.io/2023/10/20/Python%E5%AE%9E%E7%8E%B0%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%EF%BC%89/</id>
    <published>2023-10-20T08:55:05.000Z</published>
    <updated>2023-10-21T02:22:14.567Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python实现单链表"><a href="#Python实现单链表" class="headerlink" title="Python实现单链表"></a>Python实现单链表</h1><p>首先定义单个结点的结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br></pre></td></tr></table></figure><p>单个结点中，包含了一个结点值和下一个结点的指针域</p><p>整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, val</span>):</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLinkedList</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.size = <span class="number">0</span></span><br><span class="line">        self.head = ListNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        cur = self.head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index + <span class="number">1</span>):</span><br><span class="line">            cur = cur.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> cur.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtHead</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.addAtIndex(<span class="number">0</span>, val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtTail</span>(<span class="params">self, val: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.addAtIndex(self.size, val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span>, val: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> index &gt; self.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        index = <span class="built_in">max</span>(<span class="number">0</span>, index)</span><br><span class="line">        self.size += <span class="number">1</span></span><br><span class="line">        pred = self.head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">            pred = pred.<span class="built_in">next</span></span><br><span class="line">        to_add = ListNode(val)</span><br><span class="line">        to_add.<span class="built_in">next</span> = pred.<span class="built_in">next</span></span><br><span class="line">        pred.<span class="built_in">next</span> = to_add</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteAtIndex</span>(<span class="params">self, index: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> <span class="keyword">or</span> index &gt;= self.size:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.size -= <span class="number">1</span></span><br><span class="line">        pred = self.head</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(index):</span><br><span class="line">            pred = pred.<span class="built_in">next</span></span><br><span class="line">        pred.<span class="built_in">next</span> = pred.<span class="built_in">next</span>.<span class="built_in">next</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python实现单链表&quot;&gt;&lt;a href=&quot;#Python实现单链表&quot; class=&quot;headerlink&quot; title=&quot;Python实现单链表&quot;&gt;&lt;/a&gt;Python实现单链表&lt;/h1&gt;&lt;p&gt;首先定义单个结点的结构&lt;/p&gt;
&lt;figure class=&quot;hig</summary>
      
    
    
    
    
    <category term="链表" scheme="https://guoxiansen.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>django drf源码之序列化器</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</id>
    <published>2023-10-12T14:01:11.000Z</published>
    <updated>2023-10-12T14:01:11.107Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>django drf源码之解释器</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8/</id>
    <published>2023-10-12T14:00:45.000Z</published>
    <updated>2023-10-12T14:00:46.013Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>django drf源码之API版本管理</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8BAPI%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8BAPI%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2023-10-12T13:59:55.000Z</published>
    <updated>2023-10-12T14:10:37.148Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122204844.png" alt="image-20231012220431847"></p><h1 id="API版本"><a href="#API版本" class="headerlink" title="API版本"></a>API版本</h1><p>在开发过程中可能会有多版本的API，因此需要对API进行管理。django drf中对于版本的管理也很方便。</p><p><a href="http://www.example.com/api/v1/info">http://www.example.com/api/v1/info</a></p><p><a href="http://www.example.com/api/v2/info">http://www.example.com/api/v2/info</a></p><p>上面这种形式就是很常见的版本管理</p><p>在restful规范中，后端的API需要体现出版本</p><p>在django drf中，共有三种形式的版本管理</p><ol><li>通过GET参数传递</li><li>通过URL路由进行传递</li><li>通过请求头进行传递</li></ol><p>下面将对这三种方法逐一介绍</p><h2 id="1、通过get请求传递版本信息"><a href="#1、通过get请求传递版本信息" class="headerlink" title="1、通过get请求传递版本信息"></a>1、通过get请求传递版本信息</h2><p>视图函数代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">  versioning_class = QueryParameterVersioning</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">      print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">      print(request.versioning_scheme)</span><br><span class="line">      url = request.versioning_scheme.reverse(<span class="string">&quot;home&quot;</span>, request=request)</span><br><span class="line">      print(<span class="string">&quot;drf反向生成的URL为&quot;</span>, url)</span><br><span class="line">      self.dispatch</span><br><span class="line">      <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">123123</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> HomeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;home/&quot;</span>, HomeView.as_view(), name=<span class="string">&quot;home&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目的<code>settings.py</code>文件中，我们还需要进行三个配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># get请求的默认参数名称</span></span><br><span class="line">    <span class="string">&quot;VERSION_PARAM&quot;</span>: <span class="string">&quot;version&quot;</span>,</span><br><span class="line">    <span class="comment"># 默认的版本</span></span><br><span class="line">    <span class="string">&quot;DEFAULT_VERSION&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="comment"># 允许的版本</span></span><br><span class="line">    <span class="string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="string">&quot;v1&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v111&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>VERSION_PARAM</code>代表get请求的默认参数名，后面请求接口<a href="http://127.0.0.1:8000/home/?version=v1%E6%97%B6%EF%BC%8Cdjango%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84version%E8%8E%B7%E5%8F%96%E5%88%B0%EF%BC%8C%E5%B9%B6%E8%B5%8B%E5%80%BC%E5%88%B0request.version%E4%B8%AD%E3%80%82">http://127.0.0.1:8000/home/?version=v1时，django会自动将参数中的version获取到，并赋值到request.version中。</a></p><p>具体的可以参考drf中通过get请求传递版本对应部分的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryParameterVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/?version=0.1 HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in query parameter.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来提取版本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 从请求的参数中先获取有没有版本，如果没有版本则赋值为默认的版本参数</span></span><br><span class="line">        version = request.query_params.get(self.version_param, self.default_version)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line">    <span class="comment"># 用来方向生成URL</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        url = <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> replace_query_param(url, self.version_param, request.version)</span><br><span class="line">        <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><p>QueryParameterVersioning类继承自BaseVersioing类。在BaseVersioing类中，有三个默认的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    default_version = api_settings.DEFAULT_VERSION</span><br><span class="line">    allowed_versions = api_settings.ALLOWED_VERSIONS</span><br><span class="line">    version_param = api_settings.VERSION_PARAM</span><br></pre></td></tr></table></figure><p><code>default_version</code> 代表默认的版本，会自动去全局配置中寻找，如果全局中没有配置则去局部进行寻找</p><p><code>allowed_versions</code> 代表允许的版本号，会自动取<code>settings.py</code>文件中去读取相应的配置</p><p><code>version_param</code> 代表get请求参数中的关键字，例如<a href="http://127.0.0.1:8000/home/?version=v1">http://127.0.0.1:8000/home/?version=v1</a> 例如，若<code>settings.py</code>文件中配置了此url中的<code>version_param</code>值为version，那么version就是获取版本的关键字（本质上是字典的键）</p><p>接下来看效果演示，这里通过postman来模拟get和post请求。</p><ul><li>首先，这里我没有在URL中携带版本信息，由于我在全局配置中写了默认是v1，并且关键字是version，因此会帮我按照这个配置信息反向生成一个url链接。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202654.png"></p><ul><li>接下来的请求我会携带version参数，可以看到响应成功，输出api版本信息并反向生成了url</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202936.png"></p><ul><li>接下来我换一个关键词使用?xx=v3，drf会按照之前的配置，默认使用v1参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202938.png"></p><ul><li>接下来我会使用不在<code>ALLOWED_VERSIONS</code>中的版本信息，v1000，程序报错，不合格的版本信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202675.png" alt="image-20231009211750100"></p><h2 id="2、通过url路由传递版本信息"><a href="#2、通过url路由传递版本信息" class="headerlink" title="2、通过url路由传递版本信息"></a>2、通过url路由传递版本信息</h2><p>URL路由中携带版本（*）公司中常用的方法 可以直接将其写到settings.py文件中，这样可以方便后续使用，直接去全局配置中找到即可。</p><p>视图类代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2View</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    versioning_class = URLPathVersioning</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        url = request.versioning_scheme.reverse(<span class="string">&quot;home2&quot;</span>, request=request)</span><br><span class="line">        print(<span class="string">&quot;drf_HOME2反向生成的URL为&quot;</span>, url)</span><br><span class="line">        self.dispatch</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">222222</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home2&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这里注意，反向生成URL的时候需要加上一个name</p><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> Home2View</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;api/&lt;str:version&gt;/home2/&quot;</span>, Home2View.as_view(), name=<span class="string">&quot;home2&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在类视图的代码中，我们将<code>versioning_class</code> 赋值为<code>URLPathVersioning</code></p><p>在drf的源代码中，<code>URLPathVersioning</code>是这样实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To the client this is the same style as `NamespaceVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django&#x27;s URL keyword arguments to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf for two views that accept two different versions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/$&#x27;, users_list, name=&#x27;users-list&#x27;),</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/(?P&lt;pk&gt;[0-9]+)/$&#x27;, users_detail, name=&#x27;users-detail&#x27;)</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in URL path.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 从请求的参数中先获取有没有版本，</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="comment"># 如果没有版本则赋值为默认的版本参数</span></span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line">        <span class="comment"># 如果是不合法的API版本，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125; <span class="keyword">if</span> (kwargs <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> kwargs</span><br><span class="line">            kwargs[self.version_param] = request.version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>本质上就是一个determin_version()函数，首先会从<code>**kwargs</code>中获取有没有版本，如果没有版本信息则将版本赋值为全局配置中的默认版本。如果API是非法的，则抛出异常。</p><h2 id="3、通过请求头传递"><a href="#3、通过请求头传递" class="headerlink" title="3、通过请求头传递"></a>3、通过请求头传递</h2><p>视图类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home3View</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    versioning_class = AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        url = request.versioning_scheme.reverse(<span class="string">&quot;home3&quot;</span>, request=request)</span><br><span class="line">        print(<span class="string">&quot;drf_HOME2反向生成的URL为&quot;</span>, url)</span><br><span class="line">        self.dispatch</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">333333</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home3&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> Home3View</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;api/home3/&quot;</span>, Home3View.as_view(), name=<span class="string">&quot;home3&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在类视图的代码中，我们将<code>versioning_class</code> 赋值为<code>AcceptHeaderVersioning</code></p><p>在drf的源代码中，<code>AcceptHeaderVersioning</code>是这样实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于请求头传递版本信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json; version=1.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in &quot;Accept&quot; header.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        media_type = _MediaType(request.accepted_media_type)</span><br><span class="line">        version = media_type.params.get(self.version_param, self.default_version)</span><br><span class="line">        version = unicode_http_header(version)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotAcceptable(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We don&#x27;t need to implement `reverse`, as the versioning is based</span></span><br><span class="line">    <span class="comment"># on the `Accept` header, not on the request URL.</span></span><br></pre></td></tr></table></figure><p>这个请求无法再浏览器中模拟，只能通过postman中去添加请求头进行模拟，</p><p>Headers中的KEY为Accept，VALUE为application/json; version=1.0</p><ul><li>这里我先将version设置为1.0，可以看到显示信息为不合法的版本信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122201284.png" alt="image-20231009213432844"></p><ul><li>然后我将version设置为v3，可以看到可以正常访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122201464.png" alt="image-20231009213714147"></p><p>如果我不在请求头中设置的话，默认还是会访问v1版本的API，这是由于我在全局中的配置所导致的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122204844.png&quot; alt=&quot;image-20231012220431847&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;API版本&quot;</summary>
      
    
    
    
    
    <category term="django" scheme="https://guoxiansen.github.io/tags/django/"/>
    
    <category term="drf" scheme="https://guoxiansen.github.io/tags/drf/"/>
    
  </entry>
  
  <entry>
    <title>CloudSim Installation</title>
    <link href="https://guoxiansen.github.io/2023/10/11/CloudSim%20Installation/"/>
    <id>https://guoxiansen.github.io/2023/10/11/CloudSim%20Installation/</id>
    <published>2023-10-11T12:58:11.000Z</published>
    <updated>2023-10-27T14:23:37.308Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112103086.png" alt="image-20231011210335067"></p><h1 id="CloudSim安装与测试用例运行"><a href="#CloudSim安装与测试用例运行" class="headerlink" title="CloudSim安装与测试用例运行"></a>CloudSim安装与测试用例运行</h1><h1 id="0、CloudSim简介"><a href="#0、CloudSim简介" class="headerlink" title="0、CloudSim简介"></a>0、CloudSim简介</h1><ul><li>CloudSim是由澳大利亚墨尔本大学的网格实验室和Gridbus项目共同推出的开源云计算仿真平台；</li><li>CloudSim是基于<strong>Java语言</strong>开发的，可实现跨平台运行；</li><li>CloudSim有助于加快面向云计算平台的算法设计与测试速度，可降低开发的成本；</li><li>用户可以通过CloudSim提供的众多核心类来进行大规模的云计算基础设施的建模与仿真。</li></ul><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><ul><li><p>一台Windows操作系统的电脑</p></li><li><p>Java配置</p></li><li><p>Maven下载与配置</p></li><li><p>工具下载（下面两个都可以，二选一即可）</p><ul><li>Eclipse</li><li>IDEA（推荐）</li></ul></li><li><p>CloudSim下载（本次实验使用<strong>CloudSim 5.0</strong>）</p></li></ul><p><strong>注：以上所有软件的安装包均可在百度网盘中下载</strong></p><p>链接：<a href="https://pan.baidu.com/s/12JT4gDKbOLvHIeqyGbgE6A">https://pan.baidu.com/s/12JT4gDKbOLvHIeqyGbgE6A</a><br>提取码：3fd5</p><h2 id="1-1-Java配置"><a href="#1-1-Java配置" class="headerlink" title="1.1 Java配置"></a>1.1 Java配置</h2><p>首先需要再本地配置好Java的环境，这里不过多赘述，可以参考下面的教程</p><p><strong>注：本文中使用的是jdk8的版本</strong></p><h3 id="1-1-1-安装Java8"><a href="#1-1-1-安装Java8" class="headerlink" title="1.1.1 安装Java8"></a>1.1.1 安装Java8</h3><p>双击下载好百度网盘中的文件，选择你的安装路径即可</p><h3 id="1-1-2-配置环境变量"><a href="#1-1-2-配置环境变量" class="headerlink" title="1.1.2 配置环境变量"></a>1.1.2 配置环境变量</h3><p>在“计算机”图标上点击鼠标右键，点击“属性”命令，单击高级系统设置</p><p><strong>注意 配置不要照抄，要按照你自己本地的文件夹路径来</strong></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181325266.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181325255.png" alt="img"></p><p>在“系统变量”中找到Path变量，点击“编辑”，添加一个 你所安装的jdk/bin目录 </p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310251029518.png" alt="image-20231025102917421"></p><h3 id="1-2-3-确认环境变量配置是否正确"><a href="#1-2-3-确认环境变量配置是否正确" class="headerlink" title="1.2.3 确认环境变量配置是否正确"></a>1.2.3 确认环境变量配置是否正确</h3><p>安装完成后在本地cmd中输入<code>java -version</code>能够显示下面的内容即为安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112108746.png" alt="image-20231011210829423"></p><h2 id="1-2-Maven下载与配置"><a href="#1-2-Maven下载与配置" class="headerlink" title="1.2 Maven下载与配置"></a>1.2 Maven下载与配置</h2><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具 软件。 Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较 高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方 法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p><h3 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h3><p>打开<a href="https://maven.apache.org/download.cgi">Maven官网下载界面</a>，下载bin文件，该文件为编译后的Maven，无需在本地进行编译直接使用。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112113924.png" alt="image-20231011211326482"></p><p>下载完成后，保存到本地的一个可靠的路径。</p><p>然后在本地的环境变量中添加一个<code>MAVEN_HOME</code></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112121376.png" alt="image-20231011212120543"></p><p>同时在系统变量的<code>Path</code>中添加一行：</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112124937.png" alt="image-20231011212319179"></p><h3 id="1-2-2-配置本地仓库"><a href="#1-2-2-配置本地仓库" class="headerlink" title="1.2.2 配置本地仓库"></a>1.2.2 配置本地仓库</h3><p><strong>注意下面开始修改<code>settings.xml</code>文件的时候，切记不要将你的内容添加在注释当中，xml是一种类似于html的标记语言，不要将其中的结尾标记给错误的删除了。</strong></p><p>在Maven安装的同级目录下创建maven-repository文件夹，用作maven的本地库。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112127205.png" alt="image-20231011212701529"></p><p>在路径apache-maven-3.9.5/conf文件夹下找到<code>settings.xml</code>文件。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112130718.png" alt="image-20231011213017409"></p><p>在该文件中找到节点localRepository，在注释外添加。<strong>此处的路径需要修改为你自己创建的路径！！！切勿照抄复制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>你自己创建的maven仓库路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112128393.png" alt="image-20231011212855325"></p><blockquote><p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:Users用户名.m2。<br>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。<br>此外，我们在maven项目中运行mvn install，项目将会自动打包并安装到本地仓库中。</p></blockquote><h3 id="1-2-3-配置镜像"><a href="#1-2-3-配置镜像" class="headerlink" title="1.2.3 配置镜像"></a>1.2.3 配置镜像</h3><ol><li>在settings.xml配置文件中找到mirrors节点<strong>（XML文件的标签对要注意！！）</strong></li><li>添加如下配置（注意要添加在和两个标签之间，其它配置同理）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112132387.png" alt="image-20231011213207092"></p><blockquote><p>因为国外的服务器下载jar包很慢所以我们改为阿里云服务器</p><p>虽然mirrors可以配置多个子节点，但是它只会使用其中的一个节点，即默认情况下配置多个mirror的情况下，只有第一个生效，只有当前一个mirror无法连接的时候，才会去找后一个；而我们想要的效果是：当a.jar在第一个mirror中不存在的时候，maven会去第二个mirror中查询下载，但是maven不会这样做。</p></blockquote><h3 id="1-2-4-配置JDK"><a href="#1-2-4-配置JDK" class="headerlink" title="1.2.4 配置JDK"></a>1.2.4 配置JDK</h3><ol><li>在settings.xml配置文件中找到profiles节点</li><li>添加如下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112134024.png" alt="image-20231011213444786"></p><p>配置完成，win+R运行CMD，输入mvn help:system 命令进行测试，配置成功则本地仓库（maven-repository）中会出现一些文件。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112136587.png" alt="image-20231011213655948"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112139145.png" alt="image-20231011213806766"></p><p>输出以下内容即为Maven安装成功：</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112137938.png" alt="image-20231011213739689"></p><blockquote><p>首次执行 mvn help:system 命令，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。<br>下载完各种文件后， mvn help:system 命令会打印出所有的Java系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。</p></blockquote><h2 id="1-3-集成开发环境安装"><a href="#1-3-集成开发环境安装" class="headerlink" title="1.3 集成开发环境安装"></a>1.3 集成开发环境安装</h2><p>这里推荐使用IDEA，后续在工作中也多数会使用IDEA</p><p>安装教程参考：<a href="https://blog.csdn.net/rbx508780/article/details/126647849">https://blog.csdn.net/rbx508780/article/details/126647849</a></p><p>注：可以直接从官网下载专业版IDEA，利用校园邮箱免费激活。</p><h2 id="1-4-CloudSim下载"><a href="#1-4-CloudSim下载" class="headerlink" title="1.4 CloudSim下载"></a>1.4 CloudSim下载</h2><p>去github中下载CloudSim <a href="https://github.com/Cloudslab/cloudsim/releases">https://github.com/Cloudslab/cloudsim/releases</a></p><p>本实验中使用的是CloudSim5.0</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112142668.png" alt="image-20231011214208781"></p><p>下载后解压缩，然后在IDEA中打开项目，Maven会自动根据pom.xml下载一些配置文件，等待下载完成后即可。</p><p>点击open project，选择解压缩的CloudSim文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112159988.png" alt="image-20231011214707810"></p><p>在IDEA的设置中，设置之前的Maven仓库</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181130059.png" alt="image-20231018113050839"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181131474.png" alt="image-20231018113120241"></p><p>然后找到example，右击运行，出现如下效果即为安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112144218.png" alt="image-20231011214423011"></p><h1 id="CloudSim介绍"><a href="#CloudSim介绍" class="headerlink" title="CloudSim介绍"></a>CloudSim介绍</h1><h2 id="CloudSim仿真的核心类"><a href="#CloudSim仿真的核心类" class="headerlink" title="CloudSim仿真的核心类"></a>CloudSim仿真的核心类</h2><p>CloudSim仿真的核心类如下</p><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>DataCenter</td><td><strong>数据中心</strong>，提供虚拟化网络资源</td></tr><tr><td>DataCenterBroker</td><td><strong>代理</strong>，用于提交虚拟机的任务和云任务列表</td></tr><tr><td>Host</td><td><strong>主机</strong>，扩展虚拟机的参数分配策略，一台Host可以对应多台VM</td></tr><tr><td>VM</td><td><strong>虚拟机类</strong>，运行在Host上，与其他虚拟机共享资源</td></tr><tr><td>Cloudlet</td><td><strong>云任务类</strong>，构建云环境任务</td></tr></tbody></table><h2 id="CloudSim仿真流程"><a href="#CloudSim仿真流程" class="headerlink" title="CloudSim仿真流程"></a>CloudSim仿真流程</h2><ol><li>初始化CloudSim</li><li>创建数据中心DataCenter</li><li>创建用户代理Broker</li><li>创建虚拟机VM，添加至Broker</li><li>创建应用Cloudlet，添加至Broker</li><li>开启仿真</li><li>结束模拟仿真</li><li>打印输出</li></ol><h1 id="CloudSim应用"><a href="#CloudSim应用" class="headerlink" title="CloudSim应用"></a>CloudSim应用</h1><p>CloudSim5.0安装包中提供了8个示例代码，后续的实验任务可以参考其中的部分。</p><p><code>CloudSimExample1</code>：展示了如何通过一台主机创建一个云数据中心并在其上运行一个Cloudlet。</p><p><code>CloudSimExample2</code>：展示了如何创建一个包含一个主机的数据中心，并在其上运行两个云任务。这些云任务在具有相同MIPS需求的虚拟机中运行。这些云任务将花费相同的时间来完成执行。</p><p><code>CloudSimExample3</code>：展示了如何创建一个包含两个主机的数据中心，并在其上运行两个Cloudlet云任务。这些云任务在具有不同MIPS需求的虚拟机中运行。云任务将会根据所请求的虚拟机性能，花费不同的时间来完成执行。</p><p><code>CloudSimExample4</code>：展示了如何创建两个包含一个主机的数据中心，并在它们上运行两个云任务。</p><p><code>CloudSimExample5</code>：展示了如何如何创建两个数据中心，每个数据中心包含一个主机，并在它们上运行两个用户的云任务。</p><p><code>CloudSimExample6</code>：展示了如何创建可伸缩的实例。</p><p><code>CloudSimExample7</code>：展示了如何暂停和恢复模拟，以及动态地创建模拟实例（在这个例子中是一个 DatacenterBroker）。</p><p><code>CloudSimExample8</code>：展示了。如何在运行时使用一个全局管理实体（GlobalBroker）创建模拟实体（在这个例子中是一个 DatacenterBroker）。</p><h2 id="仿真步骤"><a href="#仿真步骤" class="headerlink" title="仿真步骤"></a>仿真步骤</h2><p>进行CloudSim仿真前的准备工作包括：首先初始化CloudSim的工具包，创建云数据中心DataCenter和代理DataCenterBroker；然后创建虚拟机列表VmList，将虚拟机列表提交到云数据中心和代理；接着创建云任务列表CloudletList；最后将云任务列表提交给云数据中心和代理。</p><p>在进行CloudSim仿真时，首先需要对CloudSim的核心类参数进行初始化，主要有4个核心类，分别是主机类Host、云数据中心类DataCenter、虚拟机类VirtualMachine和云任务列表类Cloudlet。</p><p>Host参数包括ID、CPU、内存、带宽、外存等，Host参数的定义及初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> hostId = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ram = <span class="number">2048</span>;              <span class="comment">//Host memory (MB)</span></span><br><span class="line"><span class="keyword">long</span> storage = <span class="number">1000000</span>; <span class="comment">//Host storage</span></span><br><span class="line"><span class="keyword">int</span> bw = <span class="number">10000</span>;</span><br><span class="line">hostList.add( <span class="keyword">new</span> Host(</span><br><span class="line">    hostId,</span><br><span class="line">    <span class="keyword">new</span> RamProvisionerSimple(ram),</span><br><span class="line">    <span class="keyword">new</span> BwProvisionerSimple(bw),</span><br><span class="line">    storage,</span><br><span class="line">    peList,</span><br><span class="line">    <span class="keyword">new</span> VmSchedulerTimeShared(peList)));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DataCenter参数包括主机架构、操作系统、虚拟机监视器种类、时区、CPU的使用费用、内存的使用费用、外存的使用费用、带宽的使用费用等。DataCenter参数的定义及初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">String arch = <span class="string">&quot;x86&quot;</span>;       <span class="comment">//system architecture</span></span><br><span class="line">String os = <span class="string">&quot;Linux&quot;</span>;        <span class="comment">//operating system</span></span><br><span class="line">String vmm = <span class="string">&quot;Xen&quot;</span>;</span><br><span class="line"><span class="keyword">double</span> time_zone = <span class="number">10.0</span>;  <span class="comment">//time zone this resource located</span></span><br><span class="line"><span class="keyword">double</span> cost = <span class="number">3.0</span>;        <span class="comment">//the cost of using processing in this resource</span></span><br><span class="line"><span class="keyword">double</span> costPerMem = <span class="number">0.05</span>; <span class="comment">//the cost of using memory in this resource</span></span><br><span class="line"><span class="keyword">double</span> costPerStorage = <span class="number">0.001</span>;  <span class="comment">//the cost of using storage in this</span></span><br><span class="line"><span class="comment">//resource</span></span><br><span class="line"><span class="keyword">double</span> costPerBw = <span class="number">0.0</span>; <span class="comment">//the cost of using bw in this resource</span></span><br><span class="line">LinkedList&lt;Storage&gt; storageList = <span class="keyword">new</span> LinkedList&lt;Storage&gt;(); <span class="comment">//we are not adding SAN</span></span><br><span class="line"><span class="comment">//devices by now</span></span><br><span class="line"></span><br><span class="line">DatacenterCharacteristics characteristics = <span class="keyword">new</span> DatacenterCharacteristics(</span><br><span class="line">    arch, os, vmm, hostList, time_zone, cost, costPerMem, costPerStorage, costPerBw);</span><br><span class="line"></span><br><span class="line"><span class="comment">//we need to create a PowerDatacenter object.</span></span><br><span class="line">Datacenter datacenter = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    datacenter = <span class="keyword">new</span> Datacenter(name, characteristics, <span class="keyword">new</span> VmAllocationPolicySimple(hostList),</span><br><span class="line">                             storageList, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>VirtualMachine参数包括ID、MIPS、镜像大小、内存大小、带宽、CPU数、虚拟机命名等。VirtualMachine参数的定义及初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//VirtualMachine properties</span></span><br><span class="line"><span class="keyword">int</span> vmid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> mips = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">long</span> size = <span class="number">10000</span>;          <span class="comment">//image size (MB)</span></span><br><span class="line"><span class="keyword">int</span> ram = <span class="number">512</span>;             <span class="comment">//vm memory (MB)</span></span><br><span class="line"><span class="keyword">long</span> bw = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">int</span> pesNumber = <span class="number">1</span>;            <span class="comment">//number of cpus</span></span><br><span class="line">String vmm = <span class="string">&quot;Xen&quot;</span>;        <span class="comment">//VMM name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//create VM</span></span><br><span class="line">Vm vm = <span class="keyword">new</span> Vm(vmid, brokerId, mips, pesNumber, ram, bw, size, vmm, </span><br><span class="line">                <span class="keyword">new</span> CloudletSchedulerTimeShared());</span><br><span class="line"></span><br><span class="line"><span class="comment">//add the VM to the vmList</span></span><br><span class="line">vmlist.add(vm);</span><br><span class="line"></span><br><span class="line"><span class="comment">//submit vm list to the broker</span></span><br><span class="line">broker.submitVmList(vmlist);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Cloudlet参数包括编号、执行时的应用长度、用到的CPU数量、提交应用前的文件大小、应用执行完成后的文件大小、CPU和内存的使用模型/策略、网络带宽的使用模型/策略等。Cloudlet参数的定义及初始化代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cloudlet properties</span></span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">long</span> length = <span class="number">400000</span>;</span><br><span class="line"><span class="keyword">long</span> fileSize = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">long</span> outputSize = <span class="number">300</span>;</span><br><span class="line">UtilizationModel utilizationModel = <span class="keyword">new</span> UtilizationModelFull();</span><br><span class="line"></span><br><span class="line">Cloudlet cloudlet = <span class="keyword">new</span> Cloudlet(id, length, pesNumber, fileSize, outputSize, </span><br><span class="line">                                utilizationModel, utilizationModel, utilizationModel);</span><br><span class="line">cloudlet.setUserId(brokerId);</span><br><span class="line">cloudlet.setVmId(vmid);</span><br><span class="line"></span><br><span class="line"><span class="comment">//add the cloudlet to the list</span></span><br><span class="line">cloudletList.add(cloudlet);</span><br><span class="line"></span><br><span class="line"><span class="comment">//submit cloudlet list to the broker</span></span><br><span class="line">broker.submitCloudletList(cloudletList);</span><br></pre></td></tr></table></figure><h1 id="实验任务"><a href="#实验任务" class="headerlink" title="实验任务"></a>实验任务</h1><p>现在需要仿真：在<strong>2个</strong>云数据中心上分别各配置<strong>2台</strong>虚拟机，每台虚拟机运行<strong>1个</strong>用户的<strong>4个</strong>Cloudlet，总计<strong>4个</strong>用户<strong>16个</strong>Cloudlet，请进行实验，并给出实验结果截图附在实验报告中。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310272206306.png" alt="image-20231027220654889"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112103086.png&quot; alt=&quot;image-20231011210335067&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;CloudS</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PROM1014-级数求和</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1014-%E7%BA%A7%E6%95%B0%E6%B1%82%E5%92%8C/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1014-%E7%BA%A7%E6%95%B0%E6%B1%82%E5%92%8C/</id>
    <published>2022-03-21T12:17:41.000Z</published>
    <updated>2023-10-18T05:34:32.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在死循环中进行级数求和，每一轮循环进行判断，是否大于输入的<code>K</code>，大于则返回当前的<code>n</code>值</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181334932.png" alt="image-20220321202013051"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">sum_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sum_num += <span class="number">1</span> / n</span><br><span class="line">    <span class="keyword">if</span> sum_num &gt; k:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;级数求和&quot;&gt;&lt;a href=&quot;#级数求和&quot; class=&quot;headerlink&quot; title=&quot;级数求和&quot;&gt;&lt;/a&gt;级数求和&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PROM1011-忠诚的骑士</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1011-%E5%BF%A0%E8%AF%9A%E7%9A%84%E9%AA%91%E5%A3%AB/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1011-%E5%BF%A0%E8%AF%9A%E7%9A%84%E9%AA%91%E5%A3%AB/</id>
    <published>2022-03-21T12:12:56.000Z</published>
    <updated>2023-10-18T05:34:20.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="忠诚的骑士"><a href="#忠诚的骑士" class="headerlink" title="忠诚的骑士"></a>忠诚的骑士</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分组的思想，判断输入的数字应该在第几组，然后判断该数字在当前分组的第几个位置，然后进行求和</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181334473.png" alt="image-20220321202055824"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">n, index</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="built_in">sum</span> += i * i</span><br><span class="line">    <span class="built_in">sum</span> += n * index</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># if k == 1:</span></span><br><span class="line">    <span class="comment">#     print(1)</span></span><br><span class="line">    p = k</span><br><span class="line">    s = k * (k + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= s:</span><br><span class="line">        p = p - <span class="number">1</span></span><br><span class="line">        s = p * (p + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 检测在第三组第几个位置</span></span><br><span class="line">    nums = []</span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line">    <span class="comment"># print(&#x27;p =&#x27;, p)</span></span><br><span class="line">    <span class="comment"># print(&#x27;s =&#x27;, s)</span></span><br><span class="line">    num = p * (p + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p + <span class="number">1</span>):</span><br><span class="line">        nums.append(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line">    <span class="comment"># print(&#x27;第&#x27;, nums.index(k) + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算金币总数</span></span><br><span class="line">    <span class="comment"># print(&#x27;金币总数：&#x27;, cal(p + 1, nums.index(k) + 1))</span></span><br><span class="line">    print(cal(p + <span class="number">1</span>, nums.index(k) + <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;忠诚的骑士&quot;&gt;&lt;a href=&quot;#忠诚的骑士&quot; class=&quot;headerlink&quot; title=&quot;忠诚的骑士&quot;&gt;&lt;/a&gt;忠诚的骑士&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1010-萌萌摘苹果</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1010-%E8%90%8C%E8%90%8C%E6%91%98%E8%8B%B9%E6%9E%9C/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1010-%E8%90%8C%E8%90%8C%E6%91%98%E8%8B%B9%E6%9E%9C/</id>
    <published>2022-03-21T12:07:34.000Z</published>
    <updated>2023-10-18T05:34:43.556Z</updated>
    
    <content type="html"><![CDATA[<h1 id="萌萌摘苹果"><a href="#萌萌摘苹果" class="headerlink" title="萌萌摘苹果"></a>萌萌摘苹果</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历苹果高度列表，判断是否能够到苹果，然后将能够到的苹果高度添加到一个新列表，循环结束之后，对两个列表长度进行比较，若长度一样返回<code>Yes</code>，否则返回<code>No</code></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181334844.png" alt="image-20220321200943805"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">height = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">high = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">get_height = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> height:</span><br><span class="line">    <span class="keyword">if</span> i &lt;= high+<span class="number">30</span>:</span><br><span class="line">        get_height.append(i)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(get_height))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(get_height)==<span class="built_in">len</span>(height):</span><br><span class="line">    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;萌萌摘苹果&quot;&gt;&lt;a href=&quot;#萌萌摘苹果&quot; class=&quot;headerlink&quot; title=&quot;萌萌摘苹果&quot;&gt;&lt;/a&gt;萌萌摘苹果&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1008-回文回文</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1008-%E5%9B%9E%E6%96%87%E5%9B%9E%E6%96%87/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1008-%E5%9B%9E%E6%96%87%E5%9B%9E%E6%96%87/</id>
    <published>2022-03-21T12:00:30.000Z</published>
    <updated>2023-10-18T05:43:43.652Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181255837.png"></p><h1 id="回文回文"><a href="#回文回文" class="headerlink" title="回文回文"></a>回文回文</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由样例输入输出来看，如果有字母大小写均存在但是回文的话返回<code>Yes</code>。因此将字符串统一转成小写，然后进行回文判断</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181254615.png" alt="image-20220321200451662"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">huiwen = <span class="built_in">input</span>()</span><br><span class="line">huiwen = huiwen.lower()</span><br><span class="line"><span class="comment"># print(huiwen, &#x27;1111&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> huiwen == huiwen[::-<span class="number">1</span>]:</span><br><span class="line">    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181255837.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;回文回文&quot;&gt;&lt;a href=&quot;#回文回文&quot; class=&quot;headerl</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1007-斐波那契数列</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1007-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1007-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2022-03-21T11:55:11.000Z</published>
    <updated>2023-10-18T05:34:52.981Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>递归<ul><li>Python解答会超时</li></ul></li><li>滚动数组<ul><li>时间复杂度较低 Python也不会超时</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310181334516.png" alt="image-20220321195628243"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">p,q,r = <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">    print(n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        p = q</span><br><span class="line">        q = r</span><br><span class="line">        r = p + q</span><br><span class="line">    print(r)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1006-最大公约数和最小公倍数</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1006-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1006-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</id>
    <published>2022-03-21T11:49:53.000Z</published>
    <updated>2023-10-18T05:35:02.888Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> m &lt; n:</span><br><span class="line">        <span class="keyword">return</span> gcd(n, m)</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        m, n = n, m % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">    print(gcd(nums[<span class="number">0</span>], nums[<span class="number">1</span>]), nums[<span class="number">0</span>]*nums[<span class="number">1</span>] // gcd(nums[<span class="number">0</span>], nums[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最大公约数和最小公倍数&quot;&gt;&lt;a href=&quot;#最大公约数和最小公倍数&quot; class=&quot;headerlink&quot; title=&quot;最大公约数和最小公倍数&quot;&gt;&lt;/a&gt;最大公约数和最小公倍数&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1001-求最值问题</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1001-%E6%B1%82%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1001-%E6%B1%82%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-21T11:47:22.000Z</published>
    <updated>2023-10-18T05:35:12.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求最值问题"><a href="#求最值问题" class="headerlink" title="求最值问题"></a>求最值问题</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;求最值问题&quot;&gt;&lt;a href=&quot;#求最值问题&quot; class=&quot;headerlink&quot; title=&quot;求最值问题&quot;&gt;&lt;/a&gt;求最值问题&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1003-新对称素数问题</title>
    <link href="https://guoxiansen.github.io/2022/03/20/PROM1003-%E6%96%B0%E5%AF%B9%E7%A7%B0%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/20/PROM1003-%E6%96%B0%E5%AF%B9%E7%A7%B0%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-20T14:40:31.000Z</published>
    <updated>2023-10-18T05:35:51.192Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新对称素数问题"><a href="#新对称素数问题" class="headerlink" title="新对称素数问题"></a>新对称素数问题</h1><h2 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h2><ul><li>Python中的连续输入</li><li>C语言中常用while(scanf(“%d”,x) !=EOF)判断输入是否碰到文件结束符（EOF）</li></ul><p>两种方法可实现对文件结束符（EOF）的判断</p><h3 id="Python实现方式一"><a href="#Python实现方式一" class="headerlink" title="Python实现方式一"></a>Python实现方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin: </span><br><span class="line">    a=<span class="built_in">int</span>(line) </span><br><span class="line">    <span class="keyword">if</span> a!=<span class="number">0</span>: </span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><h3 id="Python实现方式二"><a href="#Python实现方式二" class="headerlink" title="Python实现方式二"></a>Python实现方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>前几次提交就是没有考虑到连续输入的问题，加上上述的实现方式之后，就可以解决该问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">huiwen</span>(<span class="params">num</span>):</span></span><br><span class="line">    num = <span class="built_in">str</span>(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">99999</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># n = int(input())</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            nums = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(nums)</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> huiwen(i) <span class="keyword">and</span> prime(i) <span class="keyword">and</span> check(i):</span><br><span class="line">                    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新对称素数问题&quot;&gt;&lt;a href=&quot;#新对称素数问题&quot; class=&quot;headerlink&quot; title=&quot;新对称素数问题&quot;&gt;&lt;/a&gt;新对称素数问题&lt;/h1&gt;&lt;h2 id=&quot;需要解决的问题&quot;&gt;&lt;a href=&quot;#需要解决的问题&quot; class=&quot;headerlink</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROB1012-最小质数合数之和问题</title>
    <link href="https://guoxiansen.github.io/2022/03/20/PROB1012-%E6%9C%80%E5%B0%8F%E8%B4%A8%E6%95%B0%E5%90%88%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/20/PROB1012-%E6%9C%80%E5%B0%8F%E8%B4%A8%E6%95%B0%E5%90%88%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-20T11:47:24.000Z</published>
    <updated>2023-10-18T05:35:19.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小质数合数之和问题"><a href="#最小质数合数之和问题" class="headerlink" title="最小质数合数之和问题"></a>最小质数合数之和问题</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>查找大于正整数<code>n</code>的最小质数和最小合数之和。</p><p>质数是指在大于<code>1</code>的自然数中，除了<code>1</code>和它本身以外不再有其他因数的自然数。</p><p>合数是指在大于<code>1</code>的整数中除了能被<code>1</code>和本身整除外，还能被其他数（<code>0</code>除外）整除的数。</p><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p>一个正整数n，题目保证<code>1≤n≤1000000000</code></p><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><p>一个正整数，表示大于正整数<code>n</code>的最小质数和最小合数之和。</p><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">96</span><br></pre></td></tr></table></figure><h3 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">195</span><br></pre></td></tr></table></figure><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p>对于第一组样例：<code>n</code>为<code>1</code>的情况下，最小素数为<code>2</code>，最小合数为<code>4</code>，因此答案为<code>2+4=6</code>。</p><h2 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = []</span><br><span class="line">tag = <span class="number">0</span></span><br><span class="line">n = n + <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> isprime(n):</span><br><span class="line">        <span class="keyword">if</span> tag == <span class="number">0</span>:</span><br><span class="line">            nums.append(n)</span><br><span class="line">            tag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        nums.append(n)</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(<span class="built_in">sum</span>(nums))</span><br><span class="line"><span class="comment"># print(nums)</span></span><br></pre></td></tr></table></figure><p>测试用例通过，但是代码存在问题，原因：可能存在连续有两个合数那么将会退出</p><h2 id="第二次提交"><a href="#第二次提交" class="headerlink" title="第二次提交"></a>第二次提交</h2><p>正确解法，分开来进行单独求，利用两次死循环，一次找最小的质数，一次找最小的合数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    zhishu = <span class="number">0</span></span><br><span class="line">    heshu = <span class="number">0</span></span><br><span class="line">    k = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(k):</span><br><span class="line">            zhishu = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    k = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isPrime(k):</span><br><span class="line">            heshu = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    print(zhishu + heshu)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最小质数合数之和问题&quot;&gt;&lt;a href=&quot;#最小质数合数之和问题&quot; class=&quot;headerlink&quot; title=&quot;最小质数合数之和问题&quot;&gt;&lt;/a&gt;最小质数合数之和问题&lt;/h1&gt;&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
</feed>
