<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Clay_Guo的博客</title>
  
  
  <link href="https://guoxiansen.github.io/atom.xml" rel="self"/>
  
  <link href="https://guoxiansen.github.io/"/>
  <updated>2023-10-12T14:01:11.107Z</updated>
  <id>https://guoxiansen.github.io/</id>
  
  <author>
    <name>Clay_Guo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>django drf源码之序列化器</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E5%BA%8F%E5%88%97%E5%8C%96%E5%99%A8/</id>
    <published>2023-10-12T14:01:11.000Z</published>
    <updated>2023-10-12T14:01:11.107Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>django drf源码之解释器</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8B%E8%A7%A3%E9%87%8A%E5%99%A8/</id>
    <published>2023-10-12T14:00:45.000Z</published>
    <updated>2023-10-12T14:00:46.013Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>django drf源码之API版本管理</title>
    <link href="https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8BAPI%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    <id>https://guoxiansen.github.io/2023/10/12/django-drf%E6%BA%90%E7%A0%81%E4%B9%8BAPI%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</id>
    <published>2023-10-12T13:59:55.000Z</published>
    <updated>2023-10-12T14:05:26.303Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122204844.png" alt="image-20231012220431847"></p><h1 id="API版本"><a href="#API版本" class="headerlink" title="API版本"></a>API版本</h1><p>在开发过程中可能会有多版本的API，因此需要对API进行管理。django drf中对于版本的管理也很方便。</p><p><a href="http://www.example.com/api/v1/info">http://www.example.com/api/v1/info</a></p><p><a href="http://www.example.com/api/v2/info">http://www.example.com/api/v2/info</a></p><p>上面这种形式就是很常见的版本管理</p><p>在restful规范中，后端的API需要体现出版本</p><p>在django drf中，共有三种形式的版本管理</p><ol><li>通过GET参数传递</li><li>通过URL路由进行传递</li><li>通过请求头进行传递</li></ol><p>下面将对这三种方法逐一介绍</p><h2 id="1、通过get请求传递版本信息"><a href="#1、通过get请求传递版本信息" class="headerlink" title="1、通过get请求传递版本信息"></a>1、通过get请求传递版本信息</h2><p>视图函数代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.versioning <span class="keyword">import</span> QueryParameterVersioning</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeView</span>(<span class="params">APIView</span>):</span></span><br><span class="line">  versioning_class = QueryParameterVersioning</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request</span>):</span></span><br><span class="line">      print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">      print(request.versioning_scheme)</span><br><span class="line">      url = request.versioning_scheme.reverse(<span class="string">&quot;home&quot;</span>, request=request)</span><br><span class="line">      print(<span class="string">&quot;drf反向生成的URL为&quot;</span>, url)</span><br><span class="line">      self.dispatch</span><br><span class="line">      <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">123123</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> HomeView</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;home/&quot;</span>, HomeView.as_view(), name=<span class="string">&quot;home&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在项目的<code>settings.py</code>文件中，我们还需要进行三个配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="comment"># get请求的默认参数名称</span></span><br><span class="line">    <span class="string">&quot;VERSION_PARAM&quot;</span>: <span class="string">&quot;version&quot;</span>,</span><br><span class="line">    <span class="comment"># 默认的版本</span></span><br><span class="line">    <span class="string">&quot;DEFAULT_VERSION&quot;</span>: <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">    <span class="comment"># 允许的版本</span></span><br><span class="line">    <span class="string">&quot;ALLOWED_VERSIONS&quot;</span>: [<span class="string">&quot;v1&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v111&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，<code>VERSION_PARAM</code>代表get请求的默认参数名，后面请求接口<a href="http://127.0.0.1:8000/home/?version=v1%E6%97%B6%EF%BC%8Cdjango%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86%E5%8F%82%E6%95%B0%E4%B8%AD%E7%9A%84version%E8%8E%B7%E5%8F%96%E5%88%B0%EF%BC%8C%E5%B9%B6%E8%B5%8B%E5%80%BC%E5%88%B0request.version%E4%B8%AD%E3%80%82">http://127.0.0.1:8000/home/?version=v1时，django会自动将参数中的version获取到，并赋值到request.version中。</a></p><p>具体的可以参考drf中通过get请求传递版本对应部分的源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QueryParameterVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/?version=0.1 HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in query parameter.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用来提取版本</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 从请求的参数中先获取有没有版本，如果没有版本则赋值为默认的版本参数</span></span><br><span class="line">        version = request.query_params.get(self.version_param, self.default_version)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line">    <span class="comment"># 用来方向生成URL</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        url = <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> replace_query_param(url, self.version_param, request.version)</span><br><span class="line">        <span class="keyword">return</span> url</span><br></pre></td></tr></table></figure><p>QueryParameterVersioning类继承自BaseVersioing类。在BaseVersioing类中，有三个默认的定义：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseVersioning</span>:</span></span><br><span class="line">    default_version = api_settings.DEFAULT_VERSION</span><br><span class="line">    allowed_versions = api_settings.ALLOWED_VERSIONS</span><br><span class="line">    version_param = api_settings.VERSION_PARAM</span><br></pre></td></tr></table></figure><p><code>default_version</code> 代表默认的版本，会自动去全局配置中寻找，如果全局中没有配置则去局部进行寻找</p><p><code>allowed_versions</code> 代表允许的版本号，会自动取<code>settings.py</code>文件中去读取相应的配置</p><p><code>version_param</code> 代表get请求参数中的关键字，例如<a href="http://127.0.0.1:8000/home/?version=v1">http://127.0.0.1:8000/home/?version=v1</a> 例如，若<code>settings.py</code>文件中配置了此url中的<code>version_param</code>值为version，那么version就是获取版本的关键字（本质上是字典的键）</p><p>接下来看效果演示，这里通过postman来模拟get和post请求。</p><ul><li>首先，这里我没有在URL中携带版本信息，由于我在全局配置中写了默认是v1，并且关键字是version，因此会帮我按照这个配置信息反向生成一个url链接。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202654.png"></p><ul><li>接下来的请求我会携带version参数，可以看到响应成功，输出api版本信息并反向生成了url</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202936.png"></p><ul><li>接下来我换一个关键词使用?xx=v3，drf会按照之前的配置，默认使用v1参数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202938.png"></p><ul><li>接下来我会使用不在<code>ALLOWED_VERSIONS</code>中的版本信息，v1000，程序报错，不合格的版本信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122202675.png" alt="image-20231009211750100"></p><h2 id="2、通过url路由传递版本信息"><a href="#2、通过url路由传递版本信息" class="headerlink" title="2、通过url路由传递版本信息"></a>2、通过url路由传递版本信息</h2><p>URL路由中携带版本（*）公司中常用的方法 可以直接将其写到settings.py文件中，这样可以方便后续使用，直接去全局配置中找到即可。</p><p>视图类代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home2View</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    versioning_class = URLPathVersioning</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        url = request.versioning_scheme.reverse(<span class="string">&quot;home2&quot;</span>, request=request)</span><br><span class="line">        print(<span class="string">&quot;drf_HOME2反向生成的URL为&quot;</span>, url)</span><br><span class="line">        self.dispatch</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">222222</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home2&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>这里注意，反向生成URL的时候需要加上一个name</p><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> Home2View</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;api/&lt;str:version&gt;/home2/&quot;</span>, Home2View.as_view(), name=<span class="string">&quot;home2&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在类视图的代码中，我们将<code>versioning_class</code> 赋值为<code>URLPathVersioning</code></p><p>在drf的源代码中，<code>URLPathVersioning</code>是这样实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">URLPathVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    To the client this is the same style as `NamespaceVersioning`.</span></span><br><span class="line"><span class="string">    The difference is in the backend - this implementation uses</span></span><br><span class="line"><span class="string">    Django&#x27;s URL keyword arguments to determine the version.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    An example URL conf for two views that accept two different versions.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    urlpatterns = [</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/$&#x27;, users_list, name=&#x27;users-list&#x27;),</span></span><br><span class="line"><span class="string">        re_path(r&#x27;^(?P&lt;version&gt;[v1|v2]+)/users/(?P&lt;pk&gt;[0-9]+)/$&#x27;, users_detail, name=&#x27;users-detail&#x27;)</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    GET /1.0/something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in URL path.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="comment"># 从请求的参数中先获取有没有版本，</span></span><br><span class="line">        version = kwargs.get(self.version_param, self.default_version)</span><br><span class="line">        <span class="comment"># 如果没有版本则赋值为默认的版本参数</span></span><br><span class="line">        <span class="keyword">if</span> version <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            version = self.default_version</span><br><span class="line">        <span class="comment"># 如果是不合法的API版本，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotFound(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span>(<span class="params">self, viewname, args=<span class="literal">None</span>, kwargs=<span class="literal">None</span>, request=<span class="literal">None</span>, <span class="built_in">format</span>=<span class="literal">None</span>, **extra</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.version <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            kwargs = &#123;&#125; <span class="keyword">if</span> (kwargs <span class="keyword">is</span> <span class="literal">None</span>) <span class="keyword">else</span> kwargs</span><br><span class="line">            kwargs[self.version_param] = request.version</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().reverse(</span><br><span class="line">            viewname, args, kwargs, request, <span class="built_in">format</span>, **extra</span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>本质上就是一个determin_version()函数，首先会从<code>**kwargs</code>中获取有没有版本，如果没有版本信息则将版本赋值为全局配置中的默认版本。如果API是非法的，则抛出异常。</p><h2 id="3、通过请求头传递"><a href="#3、通过请求头传递" class="headerlink" title="3、通过请求头传递"></a>3、通过请求头传递</h2><p>视图类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home3View</span>(<span class="params">APIView</span>):</span></span><br><span class="line">    versioning_class = AcceptHeaderVersioning</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;api_version=&quot;</span>, request.version)</span><br><span class="line">        print(request.versioning_scheme)</span><br><span class="line">        url = request.versioning_scheme.reverse(<span class="string">&quot;home3&quot;</span>, request=request)</span><br><span class="line">        print(<span class="string">&quot;drf_HOME2反向生成的URL为&quot;</span>, url)</span><br><span class="line">        self.dispatch</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;<span class="string">&quot;code&quot;</span>: <span class="number">333333</span>, <span class="string">&quot;Home&quot;</span>: <span class="string">&quot;Home3&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> app01.views <span class="keyword">import</span> Home3View</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&quot;api/home3/&quot;</span>, Home3View.as_view(), name=<span class="string">&quot;home3&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在类视图的代码中，我们将<code>versioning_class</code> 赋值为<code>AcceptHeaderVersioning</code></p><p>在drf的源代码中，<code>AcceptHeaderVersioning</code>是这样实现的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于请求头传递版本信息</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AcceptHeaderVersioning</span>(<span class="params">BaseVersioning</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GET /something/ HTTP/1.1</span></span><br><span class="line"><span class="string">    Host: example.com</span></span><br><span class="line"><span class="string">    Accept: application/json; version=1.0</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    invalid_version_message = _(<span class="string">&#x27;Invalid version in &quot;Accept&quot; header.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">        media_type = _MediaType(request.accepted_media_type)</span><br><span class="line">        version = media_type.params.get(self.version_param, self.default_version)</span><br><span class="line">        version = unicode_http_header(version)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.is_allowed_version(version):</span><br><span class="line">            <span class="keyword">raise</span> exceptions.NotAcceptable(self.invalid_version_message)</span><br><span class="line">        <span class="keyword">return</span> version</span><br><span class="line"></span><br><span class="line">    <span class="comment"># We don&#x27;t need to implement `reverse`, as the versioning is based</span></span><br><span class="line">    <span class="comment"># on the `Accept` header, not on the request URL.</span></span><br></pre></td></tr></table></figure><p>这个请求无法再浏览器中模拟，只能通过postman中去添加请求头进行模拟，</p><p>Headers中的KEY为Accept，VALUE为application/json; version=1.0</p><ul><li>这里我先将version设置为1.0，可以看到显示信息为不合法的版本信息</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122201284.png" alt="image-20231009213432844"></p><ul><li>然后我将version设置为v3，可以看到可以正常访问</li></ul><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122201464.png" alt="image-20231009213714147"></p><p>如果我不在请求头中设置的话，默认还是会访问v1版本的API，这是由于我在全局中的配置所导致的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310122204844.png&quot; alt=&quot;image-20231012220431847&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;API版本&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CloudSim Installation</title>
    <link href="https://guoxiansen.github.io/2023/10/11/CloudSim%20Installation/"/>
    <id>https://guoxiansen.github.io/2023/10/11/CloudSim%20Installation/</id>
    <published>2023-10-11T12:58:11.000Z</published>
    <updated>2023-10-12T08:04:03.209Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112103086.png" alt="image-20231011210335067"></p><h1 id="CloudSim安装与测试用例运行"><a href="#CloudSim安装与测试用例运行" class="headerlink" title="CloudSim安装与测试用例运行"></a>CloudSim安装与测试用例运行</h1><h1 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h1><ul><li>Java配置</li><li>Maven下载与配置</li><li>工具下载（下面两个都可以，二选一即可）<ul><li>Eclipse（<strong>推荐</strong>）</li><li>IDEA</li></ul></li><li>CloudSim下载</li></ul><p><strong>注：以上所有软件的安装包均可在百度网盘中下载</strong></p><p>链接：<a href="https://pan.baidu.com/s/12JT4gDKbOLvHIeqyGbgE6A">https://pan.baidu.com/s/12JT4gDKbOLvHIeqyGbgE6A</a><br>提取码：3fd5</p><h2 id="1-1-Java配置"><a href="#1-1-Java配置" class="headerlink" title="1.1 Java配置"></a>1.1 Java配置</h2><p>首先需要再本地配置好Java的环境，这里不过多赘述，可以参考下面的教程</p><p><strong>注：本文中使用的是jdk8的版本</strong></p><p>Java安装与配置教程：<a href="https://blog.csdn.net/m0_74135912/article/details/129482841">https://blog.csdn.net/m0_74135912/article/details/129482841</a></p><p>安装完成后在本地cmd中输入<code>java -version</code>能够显示下面的内容即为安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112108746.png" alt="image-20231011210829423"></p><h2 id="1-2-Maven下载与配置"><a href="#1-2-Maven下载与配置" class="headerlink" title="1.2 Maven下载与配置"></a>1.2 Maven下载与配置</h2><p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的项目管理工具 软件。 Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较 高的可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方 法，许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p><h3 id="1-2-1-下载"><a href="#1-2-1-下载" class="headerlink" title="1.2.1 下载"></a>1.2.1 下载</h3><p>打开<a href="https://maven.apache.org/download.cgi">Maven官网下载界面</a>，下载bin文件，该文件为编译后的Maven，无需在本地进行编译直接使用。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112113924.png" alt="image-20231011211326482"></p><p>下载完成后，保存到本地的一个可靠的路径。</p><p>然后在本地的环境变量中添加一个<code>MAVEN_HOME</code></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112121376.png" alt="image-20231011212120543"></p><p>同时在系统变量的<code>Path</code>中添加一行：</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112124937.png" alt="image-20231011212319179"></p><h3 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h3><p>在Maven安装的同级目录下创建maven-repository文件夹，用作maven的本地库。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112127205.png" alt="image-20231011212701529"></p><p>在路径apache-maven-3.9.5/conf文件夹下找到<code>settings.xml</code>文件。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112130718.png" alt="image-20231011213017409"></p><p>在该文件中找到节点localRepository，在注释外添加。<strong>此处的路径需要修改为你自己创建的路径！！！切勿照抄复制</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>你自己创建的maven仓库路径<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112128393.png" alt="image-20231011212855325"></p><blockquote><p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:Users用户名.m2。<br>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。<br>此外，我们在maven项目中运行mvn install，项目将会自动打包并安装到本地仓库中。</p></blockquote><h3 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h3><ol><li>在settings.xml配置文件中找到mirrors节点<strong>（XML文件的标签对要注意！！）</strong></li><li>添加如下配置（注意要添加在和两个标签之间，其它配置同理）</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112132387.png" alt="image-20231011213207092"></p><blockquote><p>因为国外的服务器下载jar包很慢所以我们改为阿里云服务器</p><p>虽然mirrors可以配置多个子节点，但是它只会使用其中的一个节点，即默认情况下配置多个mirror的情况下，只有第一个生效，只有当前一个mirror无法连接的时候，才会去找后一个；而我们想要的效果是：当a.jar在第一个mirror中不存在的时候，maven会去第二个mirror中查询下载，但是maven不会这样做。</p></blockquote><h3 id="配置JDK"><a href="#配置JDK" class="headerlink" title="配置JDK"></a>配置JDK</h3><ol><li>在settings.xml配置文件中找到profiles节点</li><li>添加如下配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- java版本 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112134024.png" alt="image-20231011213444786"></p><p>配置完成，win+R运行CMD，输入mvn help:system 命令进行测试，配置成功则本地仓库（maven-repository）中会出现一些文件。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112136587.png" alt="image-20231011213655948"></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112139145.png" alt="image-20231011213806766"></p><p>输出以下内容即为Maven安装成功：</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112137938.png" alt="image-20231011213739689"></p><blockquote><p>首次执行 mvn help:system 命令，Maven相关工具自动帮我们到Maven中央仓库下载缺省的或者Maven中央仓库更新的各种配置文件和类库（jar包)到Maven本地仓库中。<br>下载完各种文件后， mvn help:system 命令会打印出所有的Java系统属性和环境变量，这些信息对我们日常的编程工作很有帮助。</p></blockquote><h2 id="1-3-集成开发环境安装"><a href="#1-3-集成开发环境安装" class="headerlink" title="1.3 集成开发环境安装"></a>1.3 集成开发环境安装</h2><p>这里推荐使用IDEA，后续在工作中也多数会使用IDEA</p><p>安装教程参考：<a href="https://blog.csdn.net/rbx508780/article/details/126647849">https://blog.csdn.net/rbx508780/article/details/126647849</a></p><p>注：可以直接从官网下载专业版IDEA，利用校园邮箱免费激活。</p><h2 id="1-4-CloudSim下载"><a href="#1-4-CloudSim下载" class="headerlink" title="1.4 CloudSim下载"></a>1.4 CloudSim下载</h2><p>去github中下载CloudSim <a href="https://github.com/Cloudslab/cloudsim/releases">https://github.com/Cloudslab/cloudsim/releases</a></p><p>本实验中使用的是CloudSim5.0</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112142668.png" alt="image-20231011214208781"></p><p>下载后解压缩，然后在IDEA中打开项目，Maven会自动根据pom.xml下载一些配置文件，等待下载完成后即可。</p><p>点击open project，选择解压缩的CloudSim文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112159988.png" alt="image-20231011214707810"></p><p>找到example，右击运行，出现如下效果即为安装成功。</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112144218.png" alt="image-20231011214423011"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310112103086.png&quot; alt=&quot;image-20231011210335067&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;CloudS</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test博客</title>
    <link href="https://guoxiansen.github.io/2023/10/09/test%E5%8D%9A%E5%AE%A2/"/>
    <id>https://guoxiansen.github.io/2023/10/09/test%E5%8D%9A%E5%AE%A2/</id>
    <published>2023-10-09T12:56:28.000Z</published>
    <updated>2023-10-09T12:56:48.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试博客"><a href="#测试博客" class="headerlink" title="测试博客"></a>测试博客</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试博客&quot;&gt;&lt;a href=&quot;#测试博客&quot; class=&quot;headerlink&quot; title=&quot;测试博客&quot;&gt;&lt;/a&gt;测试博客&lt;/h1&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PROM1014-级数求和</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1014-%E7%BA%A7%E6%95%B0%E6%B1%82%E5%92%8C/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1014-%E7%BA%A7%E6%95%B0%E6%B1%82%E5%92%8C/</id>
    <published>2022-03-21T12:17:41.000Z</published>
    <updated>2022-03-21T12:20:14.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="级数求和"><a href="#级数求和" class="headerlink" title="级数求和"></a>级数求和</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在死循环中进行级数求和，每一轮循环进行判断，是否大于输入的<code>K</code>，大于则返回当前的<code>n</code>值</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220321202013051.png" alt="image-20220321202013051"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n = <span class="number">1</span></span><br><span class="line">sum_num = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sum_num += <span class="number">1</span> / n</span><br><span class="line">    <span class="keyword">if</span> sum_num &gt; k:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(n)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;级数求和&quot;&gt;&lt;a href=&quot;#级数求和&quot; class=&quot;headerlink&quot; title=&quot;级数求和&quot;&gt;&lt;/a&gt;级数求和&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>PROM1011-忠诚的骑士</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1011-%E5%BF%A0%E8%AF%9A%E7%9A%84%E9%AA%91%E5%A3%AB/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1011-%E5%BF%A0%E8%AF%9A%E7%9A%84%E9%AA%91%E5%A3%AB/</id>
    <published>2022-03-21T12:12:56.000Z</published>
    <updated>2022-03-21T12:20:58.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="忠诚的骑士"><a href="#忠诚的骑士" class="headerlink" title="忠诚的骑士"></a>忠诚的骑士</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>分组的思想，判断输入的数字应该在第几组，然后判断该数字在当前分组的第几个位置，然后进行求和</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220321202055824.png" alt="image-20220321202055824"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal</span>(<span class="params">n, index</span>):</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        <span class="built_in">sum</span> += i * i</span><br><span class="line">    <span class="built_in">sum</span> += n * index</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    k = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    <span class="comment"># if k == 1:</span></span><br><span class="line">    <span class="comment">#     print(1)</span></span><br><span class="line">    p = k</span><br><span class="line">    s = k * (k + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= s:</span><br><span class="line">        p = p - <span class="number">1</span></span><br><span class="line">        s = p * (p + <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">    <span class="comment"># 检测在第三组第几个位置</span></span><br><span class="line">    nums = []</span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line">    <span class="comment"># print(&#x27;p =&#x27;, p)</span></span><br><span class="line">    <span class="comment"># print(&#x27;s =&#x27;, s)</span></span><br><span class="line">    num = p * (p + <span class="number">1</span>) // <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(p + <span class="number">1</span>):</span><br><span class="line">        nums.append(num)</span><br><span class="line">        num += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print(nums)</span></span><br><span class="line">    <span class="comment"># print(&#x27;第&#x27;, nums.index(k) + 1)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算金币总数</span></span><br><span class="line">    <span class="comment"># print(&#x27;金币总数：&#x27;, cal(p + 1, nums.index(k) + 1))</span></span><br><span class="line">    print(cal(p + <span class="number">1</span>, nums.index(k) + <span class="number">1</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;忠诚的骑士&quot;&gt;&lt;a href=&quot;#忠诚的骑士&quot; class=&quot;headerlink&quot; title=&quot;忠诚的骑士&quot;&gt;&lt;/a&gt;忠诚的骑士&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1010-萌萌摘苹果</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1010-%E8%90%8C%E8%90%8C%E6%91%98%E8%8B%B9%E6%9E%9C/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1010-%E8%90%8C%E8%90%8C%E6%91%98%E8%8B%B9%E6%9E%9C/</id>
    <published>2022-03-21T12:07:34.000Z</published>
    <updated>2022-03-21T12:09:45.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="萌萌摘苹果"><a href="#萌萌摘苹果" class="headerlink" title="萌萌摘苹果"></a>萌萌摘苹果</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>遍历苹果高度列表，判断是否能够到苹果，然后将能够到的苹果高度添加到一个新列表，循环结束之后，对两个列表长度进行比较，若长度一样返回<code>Yes</code>，否则返回<code>No</code></p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220321200943805.png" alt="image-20220321200943805"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">height = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">high = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">get_height = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> height:</span><br><span class="line">    <span class="keyword">if</span> i &lt;= high+<span class="number">30</span>:</span><br><span class="line">        get_height.append(i)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">len</span>(get_height))</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(get_height)==<span class="built_in">len</span>(height):</span><br><span class="line">    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;萌萌摘苹果&quot;&gt;&lt;a href=&quot;#萌萌摘苹果&quot; class=&quot;headerlink&quot; title=&quot;萌萌摘苹果&quot;&gt;&lt;/a&gt;萌萌摘苹果&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1008-回文回文</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1008-%E5%9B%9E%E6%96%87%E5%9B%9E%E6%96%87/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1008-%E5%9B%9E%E6%96%87%E5%9B%9E%E6%96%87/</id>
    <published>2022-03-21T12:00:30.000Z</published>
    <updated>2022-03-21T12:21:30.334Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回文回文"><a href="#回文回文" class="headerlink" title="回文回文"></a>回文回文</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>由样例输入输出来看，如果有字母大小写均存在但是回文的话返回<code>Yes</code>。因此将字符串统一转成小写，然后进行回文判断</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220321200451662.png" alt="image-20220321200451662"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">huiwen = <span class="built_in">input</span>()</span><br><span class="line">huiwen = huiwen.lower()</span><br><span class="line"><span class="comment"># print(huiwen, &#x27;1111&#x27;)</span></span><br><span class="line"><span class="keyword">if</span> huiwen == huiwen[::-<span class="number">1</span>]:</span><br><span class="line">    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回文回文&quot;&gt;&lt;a href=&quot;#回文回文&quot; class=&quot;headerlink&quot; title=&quot;回文回文&quot;&gt;&lt;/a&gt;回文回文&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;/a&gt;思路&lt;/h</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1007-斐波那契数列</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1007-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1007-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/</id>
    <published>2022-03-21T11:55:11.000Z</published>
    <updated>2022-03-21T11:59:56.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ul><li>递归<ul><li>Python解答会超时</li></ul></li><li>滚动数组<ul><li>时间复杂度较低 Python也不会超时</li></ul></li></ul><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220321195628243.png" alt="image-20220321195628243"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">p,q,r = <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line">    print(n)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        p = q</span><br><span class="line">        q = r</span><br><span class="line">        r = p + q</span><br><span class="line">    print(r)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;斐波那契数列&quot;&gt;&lt;a href=&quot;#斐波那契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波那契数列&quot;&gt;&lt;/a&gt;斐波那契数列&lt;/h1&gt;&lt;h2 id=&quot;思路&quot;&gt;&lt;a href=&quot;#思路&quot; class=&quot;headerlink&quot; title=&quot;思路&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1006-最大公约数和最小公倍数</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1006-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1006-%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0%E5%92%8C%E6%9C%80%E5%B0%8F%E5%85%AC%E5%80%8D%E6%95%B0/</id>
    <published>2022-03-21T11:49:53.000Z</published>
    <updated>2022-03-21T11:50:39.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最大公约数和最小公倍数"><a href="#最大公约数和最小公倍数" class="headerlink" title="最大公约数和最小公倍数"></a>最大公约数和最小公倍数</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> m &lt; n:</span><br><span class="line">        <span class="keyword">return</span> gcd(n, m)</span><br><span class="line">    <span class="keyword">while</span> n:</span><br><span class="line">        m, n = n, m % n</span><br><span class="line">    <span class="keyword">return</span> m</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nums = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line">    print(gcd(nums[<span class="number">0</span>], nums[<span class="number">1</span>]), nums[<span class="number">0</span>]*nums[<span class="number">1</span>] // gcd(nums[<span class="number">0</span>], nums[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最大公约数和最小公倍数&quot;&gt;&lt;a href=&quot;#最大公约数和最小公倍数&quot; class=&quot;headerlink&quot; title=&quot;最大公约数和最小公倍数&quot;&gt;&lt;/a&gt;最大公约数和最小公倍数&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1001-求最值问题</title>
    <link href="https://guoxiansen.github.io/2022/03/21/PROM1001-%E6%B1%82%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/21/PROM1001-%E6%B1%82%E6%9C%80%E5%80%BC%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-21T11:47:22.000Z</published>
    <updated>2022-03-21T11:48:18.020Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求最值问题"><a href="#求最值问题" class="headerlink" title="求最值问题"></a>求最值问题</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="built_in">sum</span>([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;求最值问题&quot;&gt;&lt;a href=&quot;#求最值问题&quot; class=&quot;headerlink&quot; title=&quot;求最值问题&quot;&gt;&lt;/a&gt;求最值问题&lt;/h1&gt;&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROM1003-新对称素数问题</title>
    <link href="https://guoxiansen.github.io/2022/03/20/PROM1003-%E6%96%B0%E5%AF%B9%E7%A7%B0%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/20/PROM1003-%E6%96%B0%E5%AF%B9%E7%A7%B0%E7%B4%A0%E6%95%B0%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-20T14:40:31.000Z</published>
    <updated>2022-03-20T15:12:57.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="新对称素数问题"><a href="#新对称素数问题" class="headerlink" title="新对称素数问题"></a>新对称素数问题</h1><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/exa012dfaszxcasYSAsd.png" alt="exa012dfaszxcasYSAsd"></p><h2 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h2><ul><li>Python中的连续输入</li><li>C语言中常用while(scanf(“%d”,x) !=EOF)判断输入是否碰到文件结束符（EOF）</li></ul><p>两种方法可实现对文件结束符（EOF）的判断</p><h3 id="Python实现方式一"><a href="#Python实现方式一" class="headerlink" title="Python实现方式一"></a>Python实现方式一</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin: </span><br><span class="line">    a=<span class="built_in">int</span>(line) </span><br><span class="line">    <span class="keyword">if</span> a!=<span class="number">0</span>: </span><br><span class="line">        print(a)</span><br></pre></td></tr></table></figure><h3 id="Python实现方式二"><a href="#Python实现方式二" class="headerlink" title="Python实现方式二"></a>Python实现方式二</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        s = <span class="built_in">input</span>()</span><br><span class="line"><span class="keyword">except</span> EOFError:</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><p>前几次提交就是没有考虑到连续输入的问题，加上上述的实现方式之后，就可以解决该问题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">huiwen</span>(<span class="params">num</span>):</span></span><br><span class="line">    num = <span class="built_in">str</span>(num)</span><br><span class="line">    <span class="keyword">if</span> num == num[::-<span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt;= <span class="number">99999</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># n = int(input())</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            nums = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split(<span class="string">&#x27; &#x27;</span>)]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># print(nums)</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> huiwen(i) <span class="keyword">and</span> prime(i) <span class="keyword">and</span> check(i):</span><br><span class="line">                    print(<span class="string">&#x27;Yes&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&#x27;No&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;新对称素数问题&quot;&gt;&lt;a href=&quot;#新对称素数问题&quot; class=&quot;headerlink&quot; title=&quot;新对称素数问题&quot;&gt;&lt;/a&gt;新对称素数问题&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/clay_guo/pic-bed/raw/m</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>PROB1012-最小质数合数之和问题</title>
    <link href="https://guoxiansen.github.io/2022/03/20/PROB1012-%E6%9C%80%E5%B0%8F%E8%B4%A8%E6%95%B0%E5%90%88%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/"/>
    <id>https://guoxiansen.github.io/2022/03/20/PROB1012-%E6%9C%80%E5%B0%8F%E8%B4%A8%E6%95%B0%E5%90%88%E6%95%B0%E4%B9%8B%E5%92%8C%E9%97%AE%E9%A2%98/</id>
    <published>2022-03-20T11:47:24.000Z</published>
    <updated>2022-03-20T15:13:03.787Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小质数合数之和问题"><a href="#最小质数合数之和问题" class="headerlink" title="最小质数合数之和问题"></a>最小质数合数之和问题</h1><h2 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h2><p>查找大于正整数<code>n</code>的最小质数和最小合数之和。</p><p>质数是指在大于<code>1</code>的自然数中，除了<code>1</code>和它本身以外不再有其他因数的自然数。</p><p>合数是指在大于<code>1</code>的整数中除了能被<code>1</code>和本身整除外，还能被其他数（<code>0</code>除外）整除的数。</p><h3 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h3><p>一个正整数n，题目保证<code>1≤n≤1000000000</code></p><h3 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h3><p>一个正整数，表示大于正整数<code>n</code>的最小质数和最小合数之和。</p><h3 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><h3 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">96</span><br></pre></td></tr></table></figure><h3 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">195</span><br></pre></td></tr></table></figure><h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p>对于第一组样例：<code>n</code>为<code>1</code>的情况下，最小素数为<code>2</code>，最小合数为<code>4</code>，因此答案为<code>2+4=6</code>。</p><h2 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isprime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">nums = []</span><br><span class="line">tag = <span class="number">0</span></span><br><span class="line">n = n + <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(nums) == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> isprime(n):</span><br><span class="line">        <span class="keyword">if</span> tag == <span class="number">0</span>:</span><br><span class="line">            nums.append(n)</span><br><span class="line">            tag = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        nums.append(n)</span><br><span class="line">    n += <span class="number">1</span></span><br><span class="line">print(<span class="built_in">sum</span>(nums))</span><br><span class="line"><span class="comment"># print(nums)</span></span><br></pre></td></tr></table></figure><p>测试用例通过，但是代码存在问题，原因：可能存在连续有两个合数那么将会退出</p><h2 id="第二次提交"><a href="#第二次提交" class="headerlink" title="第二次提交"></a>第二次提交</h2><p>正确解法，分开来进行单独求，利用两次死循环，一次找最小的质数，一次找最小的合数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isPrime</span>(<span class="params">num</span>):</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">int</span>(num**<span class="number">0.5</span>) + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> num % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">    zhishu = <span class="number">0</span></span><br><span class="line">    heshu = <span class="number">0</span></span><br><span class="line">    k = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> isPrime(k):</span><br><span class="line">            zhishu = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    k = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isPrime(k):</span><br><span class="line">            heshu = k</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    print(zhishu + heshu)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;最小质数合数之和问题&quot;&gt;&lt;a href=&quot;#最小质数合数之和问题&quot; class=&quot;headerlink&quot; title=&quot;最小质数合数之和问题&quot;&gt;&lt;/a&gt;最小质数合数之和问题&lt;/h1&gt;&lt;h2 id=&quot;题目描述：&quot;&gt;&lt;a href=&quot;#题目描述：&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="NOJ" scheme="https://guoxiansen.github.io/tags/NOJ/"/>
    
  </entry>
  
  <entry>
    <title>操作系统复习笔记</title>
    <link href="https://guoxiansen.github.io/2022/03/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://guoxiansen.github.io/2022/03/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-03-10T06:38:42.000Z</published>
    <updated>2022-03-20T13:54:40.545Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220310144152329.png" alt="image-20220310144152329"></p><h1 id="准备复试-暂停更新"><a href="#准备复试-暂停更新" class="headerlink" title="准备复试 暂停更新"></a>准备复试 暂停更新</h1><p>2022.3.20</p><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h1 id="第一章-操作系统概述"><a href="#第一章-操作系统概述" class="headerlink" title="第一章 操作系统概述"></a>第一章 操作系统概述</h1><h2 id="1-0-章节框架图"><a href="#1-0-章节框架图" class="headerlink" title="1.0 章节框架图"></a>1.0 章节框架图</h2><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220301173151773.png" alt="image-20220301173151773"></p><p>操作系统是计算机系统中的系统软件</p><h2 id="操作系统地位、作用"><a href="#操作系统地位、作用" class="headerlink" title="操作系统地位、作用"></a>操作系统地位、作用</h2><h2 id="操作系统的设计目标"><a href="#操作系统的设计目标" class="headerlink" title="操作系统的设计目标"></a>操作系统的设计目标</h2><ul><li>有效性</li><li>方便性</li><li>可扩充</li><li>开放性</li></ul><h2 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h2><p>中断是主机接收到外部信号或者系统发生随机性事件，停止当前执行的程序，转而处理这一事件，待事件处理完成，主机又可以回到原来的断点继续工作。中断是让操作系统内核夺回CPU使用权限的唯一途径。操作系统是由中断驱动的。</p><h3 id="用户态转到核心态（内核态）的三种方式"><a href="#用户态转到核心态（内核态）的三种方式" class="headerlink" title="用户态转到核心态（内核态）的三种方式"></a>用户态转到核心态（内核态）的三种方式</h3><ul><li>程序请求操作系统服务，执行<strong>系统调用</strong>。</li><li>程序运行时产生<strong>外中断</strong>事件（比如I/O操作完成），运行程序被中断，转向中断程序处理</li><li>在程序运行时发生<strong>内中断</strong>事件（<strong>异常</strong>），运行程序被打断，转向异常处理程序工作</li></ul><h4 id="用户态"><a href="#用户态" class="headerlink" title="用户态"></a>用户态</h4><p>也叫目态，即用户进程运行时处理器的状态。</p><h4 id="核心态"><a href="#核心态" class="headerlink" title="核心态"></a>核心态</h4><p>也称管态，即操作系统的自身核心部分及部分系统进程的程序运行时的处理器状态</p><p>操作系统内核所运行的模式。运行在该模式的代码，可以无限制地对系统存储、外部设备进行访问。</p><h4 id="特权指令"><a href="#特权指令" class="headerlink" title="特权指令"></a>特权指令</h4><p>只能由操作系统调用而不能被用户调用的指令</p><h3 id="核心态转到用户态的方式"><a href="#核心态转到用户态的方式" class="headerlink" title="核心态转到用户态的方式"></a>核心态转到用户态的方式</h3><h3 id="中断类型"><a href="#中断类型" class="headerlink" title="中断类型"></a>中断类型</h3><ul><li>外中断<ul><li>也叫中断，狭义上的中断。外中断与当前执行的指令无关，中断信号源于CPU外部，如I/O设备完成终端，表示设备输入输出处理已经完成，CPU能够发送下一个输入输出请求。此外还有<strong>时钟中断</strong>，<strong>控制台中断</strong>等</li></ul></li><li>内中断<ul><li>也叫异常、例外。内中断与当前执行的指令有关，中断信号源于CPU内部，如非法操作码、地址越界、算术溢出、除数为0等</li></ul></li></ul><h3 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h3><p>不同的中断信号，需要不同的中断处理程序来处理。当CPU检测中断信号后，就会根据中断信号的类型去查中断向量表，以此来找到对应的中断处理程序在内存中存放的位置。</p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><h1 id="第二章-处理器管理"><a href="#第二章-处理器管理" class="headerlink" title="第二章 处理器管理"></a>第二章 处理器管理</h1><h2 id="2-0-章节框架图"><a href="#2-0-章节框架图" class="headerlink" title="2.0 章节框架图"></a>2.0 章节框架图</h2><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220301173331378.png" alt="image-20220301173331378"></p><h2 id="2-1-进程及其实现"><a href="#2-1-进程及其实现" class="headerlink" title="2.1 进程及其实现"></a>2.1 进程及其实现</h2><h3 id="2-1-1-进程定义"><a href="#2-1-1-进程定义" class="headerlink" title="2.1.1 进程定义"></a>2.1.1 进程定义</h3><p>进程包括程序、数据、程序控制块PCB和栈。进程是操作系统进行资源调度和分配的独立的单位</p><h3 id="2-1-2-进程类型及特性"><a href="#2-1-2-进程类型及特性" class="headerlink" title="2.1.2 进程类型及特性"></a>2.1.2 进程类型及特性</h3><h4 id="进程类型"><a href="#进程类型" class="headerlink" title="进程类型"></a>进程类型</h4><ul><li>系统进程<ul><li>如C语言的编译进程</li></ul></li><li>用户进程</li></ul><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><ul><li>结构性</li><li>共享性</li><li>动态性</li><li>独立性</li><li>制约性</li><li>并发性</li></ul><h4 id="进程和程序的区别"><a href="#进程和程序的区别" class="headerlink" title="进程和程序的区别"></a>进程和程序的区别</h4><ul><li>进程可以描述系统的并发特性，但程序不可以</li><li>进程包含程序、数据、PCB和栈，程序是进程的一部分</li><li>进程是动态的，程序是静态的</li><li>进程有其生命周期，而程序可以长久保存在磁盘中</li><li>一个进程可以有多个进程，一个进程也可以涉及多个程序。</li><li>进程可以创建子进程，而程序不能创建子程序</li></ul><h3 id="2-1-3-进程的状态和转化"><a href="#2-1-3-进程的状态和转化" class="headerlink" title="2.1.3 进程的状态和转化"></a>2.1.3 进程的状态和转化</h3><h4 id="进程的基本状态"><a href="#进程的基本状态" class="headerlink" title="进程的基本状态"></a>进程的基本状态</h4><ul><li>运行态<ul><li>当前进程占有CPU并正在运行，则其所处的状态就是运行态</li></ul></li><li>就绪态<ul><li>当前进程具备了在CPU上执行的所有条件，等待CPU调度程序分配CPU，其状态叫就绪态</li></ul></li><li>等待态<ul><li>也叫阻塞态，当前进程等待系统某个信号、某个资源或等待事件发生，当需求没有被满足，此时的状态为等待态</li></ul></li></ul><h4 id="进程转换图"><a href="#进程转换图" class="headerlink" title="进程转换图"></a>进程转换图</h4><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220310142855812.png" alt="image-20220310142855812"></p><h4 id="五状态模型"><a href="#五状态模型" class="headerlink" title="五状态模型"></a>五状态模型</h4><p>在三状态模型的基础上添加新建态和终止态</p><p>新建态是指进程刚被创建的时候，系统还没有允许执行该进程，且所需的其他资源还没有被完全满足</p><p>终止态是指进程正常结束或异常终止之后的状态。</p><h4 id="七状态模型"><a href="#七状态模型" class="headerlink" title="七状态模型"></a>七状态模型</h4><p>在五状态模型的基础上新增就绪挂起和等待挂起状态</p><h2 id="2-2-进程控制"><a href="#2-2-进程控制" class="headerlink" title="2.2 进程控制"></a>2.2 进程控制</h2><h3 id="2-2-1-进程控制原语"><a href="#2-2-1-进程控制原语" class="headerlink" title="2.2.1 进程控制原语"></a>2.2.1 进程控制原语</h3><p>原语是指在管态下执行的，具有原子性、能实现特定系统功能的程序段。这里的原子性是指程序段不可分割，即在执行过程中不允许被中断。</p><h2 id="2-3-处理器调度"><a href="#2-3-处理器调度" class="headerlink" title="2.3 处理器调度"></a>2.3 处理器调度</h2><h3 id="2-3-1-处理器调度的模式"><a href="#2-3-1-处理器调度的模式" class="headerlink" title="2.3.1 处理器调度的模式"></a>2.3.1 处理器调度的模式</h3><h3 id="2-3-2-处理器调度的原则"><a href="#2-3-2-处理器调度的原则" class="headerlink" title="2.3.2 处理器调度的原则"></a>2.3.2 处理器调度的原则</h3><h2 id="2-4-进程联系"><a href="#2-4-进程联系" class="headerlink" title="2.4 进程联系"></a>2.4 进程联系</h2><h2 id="2-5-临界区管理"><a href="#2-5-临界区管理" class="headerlink" title="2.5 临界区管理"></a>2.5 临界区管理</h2><h2 id="2-6-信号量与PV操作"><a href="#2-6-信号量与PV操作" class="headerlink" title="2.6 信号量与PV操作"></a>2.6 信号量与PV操作</h2><p>信号量是一种特殊的变量，它的表面形式是一个整型变量附加一个队列，而且它只能被特殊的操作使用。</p><p>P操作和V操作都是原语</p><h3 id="几大问题"><a href="#几大问题" class="headerlink" title="几大问题"></a>几大问题</h3><ul><li>生产者-消费者问题</li><li>读者-写者问题</li><li>吸烟者问题</li><li>哲学家进餐问题</li></ul><h2 id="2-7-进程通信"><a href="#2-7-进程通信" class="headerlink" title="2.7 进程通信"></a>2.7 进程通信</h2><h2 id="2-8-进程死锁"><a href="#2-8-进程死锁" class="headerlink" title="2.8 进程死锁"></a>2.8 进程死锁</h2><h3 id="死锁的概念"><a href="#死锁的概念" class="headerlink" title="死锁的概念"></a>死锁的概念</h3><p>死锁是在多道进程并发执行的环境下</p><h3 id="死锁产生的条件"><a href="#死锁产生的条件" class="headerlink" title="死锁产生的条件"></a>死锁产生的条件</h3><ul><li><strong>互斥使用（资源独占）</strong>：资源每次只能给一个进程使用 </li><li><strong>不可抢占（不可剥夺）</strong>：资源申请者不能强行从占有者手中剥夺资源，只能由占有者自愿释放</li><li><strong>保持请求</strong>：进程在申请新资源时，保持对原有资源的占有</li><li><strong>循环等待</strong>：存在进程等待队列{P1,P2,P3……Pn}，P1等待P2占有的资源，P2等待P3占有的资源……Pn等待P1占有的资源，形成环路</li></ul><h3 id="死锁的预防机制"><a href="#死锁的预防机制" class="headerlink" title="死锁的预防机制"></a>死锁的预防机制</h3><h4 id="机制原理"><a href="#机制原理" class="headerlink" title="机制原理"></a>机制原理</h4><ul><li>预先确定资源分配，保证不发生死锁</li><li>通过破坏死锁4个必要条件之一来实现</li><li>破坏“互斥使用”这一条件不现实</li></ul><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>破坏不可抢占条件<ul><li>允许进程动态申请资源</li><li>进程在申请新资源不能得到满足而变为等待状态之前，必须释放已占有的资源</li><li>若需要资源必须重新申请</li></ul></li><li>破坏请求保持条件<ul><li>不允许进程动态申请资源</li><li>进程运行之前必须一次性申请所需的所有资源</li><li>进程所有资源均可满足时给予一次性分配</li></ul></li><li>破坏循环等待条件<ul><li></li></ul></li></ul><h3 id="进程死锁的避免机制"><a href="#进程死锁的避免机制" class="headerlink" title="进程死锁的避免机制"></a>进程死锁的避免机制</h3><h4 id="机制原理-1"><a href="#机制原理-1" class="headerlink" title="机制原理"></a>机制原理</h4><ul><li>对进程发出的每一个资源申请进行动态检查</li><li>根据检查结果决定是否分配资源</li><li>若试分配后可能发生死锁，则不予分配，否则分配</li></ul><h4 id="银行家算法"><a href="#银行家算法" class="headerlink" title="银行家算法"></a>银行家算法</h4><h4 id="死锁原因"><a href="#死锁原因" class="headerlink" title="死锁原因"></a>死锁原因</h4><ul><li>系统资源不足</li><li>进程运行推进顺序不合理</li><li>资源分配不当</li></ul><p>解决原则</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220228200304386.png" alt="image-20220228200304386"></p><ul><li>单独使用死锁预防、避免、检测与接触并不能全面解决操作系统中遇到的所有死锁问题</li><li>可将系统中的进程、资源分为若干类，对每一类进程、资源使用最适合它的办法解决死锁</li></ul><h1 id="第三章-存储管理"><a href="#第三章-存储管理" class="headerlink" title="第三章 存储管理"></a>第三章 存储管理</h1><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220301173628409.png" alt="image-20220301173628409"></p><h3 id="3-1-基本概述"><a href="#3-1-基本概述" class="headerlink" title="3.1 基本概述"></a>3.1 基本概述</h3><h4 id="3-1-1-计算机中的存储体系"><a href="#3-1-1-计算机中的存储体系" class="headerlink" title="3.1.1 计算机中的存储体系"></a>3.1.1 计算机中的存储体系</h4><h4 id="3-1-5-存储覆盖和交换技术"><a href="#3-1-5-存储覆盖和交换技术" class="headerlink" title="3.1.5 存储覆盖和交换技术"></a>3.1.5 存储覆盖和交换技术</h4><h1 id="第五章-文件管理"><a href="#第五章-文件管理" class="headerlink" title="第五章 文件管理"></a>第五章 文件管理</h1><h2 id="5-1-基本概述"><a href="#5-1-基本概述" class="headerlink" title="5.1 基本概述"></a>5.1 基本概述</h2><h2 id="5-2-文件目录"><a href="#5-2-文件目录" class="headerlink" title="5.2 文件目录"></a>5.2 文件目录</h2><h2 id="5-3-文件的物理结构"><a href="#5-3-文件的物理结构" class="headerlink" title="5.3 文件的物理结构"></a>5.3 文件的物理结构</h2><h1 id="弱项知识点"><a href="#弱项知识点" class="headerlink" title="弱项知识点"></a>弱项知识点</h1><h2 id="Spooling技术"><a href="#Spooling技术" class="headerlink" title="Spooling技术"></a>Spooling技术</h2><p>假脱机技术</p><h2 id="对比Spooling技术和缓冲区技术"><a href="#对比Spooling技术和缓冲区技术" class="headerlink" title="对比Spooling技术和缓冲区技术"></a>对比Spooling技术和缓冲区技术</h2><h2 id="文件物理结构（索引文件结构）"><a href="#文件物理结构（索引文件结构）" class="headerlink" title="文件物理结构（索引文件结构）"></a>文件物理结构（索引文件结构）</h2><ul><li>顺序文件结构</li><li>链接文件结构</li><li>索引文件结构</li></ul><h3 id="索引文件结构"><a href="#索引文件结构" class="headerlink" title="索引文件结构"></a>索引文件结构</h3><h3 id="混合索引文件结构"><a href="#混合索引文件结构" class="headerlink" title="混合索引文件结构"></a>混合索引文件结构</h3><p>直接索引：索引直接指向物理地址</p><p>一级间接地址索引：索引节点指向的物理地址用来存放地址项</p><p>二级间接地址索引：索引节点指向的物理块用来存放一级索引</p><h2 id="文件目录结构"><a href="#文件目录结构" class="headerlink" title="文件目录结构"></a>文件目录结构</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220310144152329.png&quot; alt=&quot;image-20220310144152329&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;准备复试-</summary>
      
    
    
    
    
    <category term="操作系统" scheme="https://guoxiansen.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode509-斐波那契数</title>
    <link href="https://guoxiansen.github.io/2022/03/09/LeetCode509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/"/>
    <id>https://guoxiansen.github.io/2022/03/09/LeetCode509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</id>
    <published>2022-03-09T14:45:57.000Z</published>
    <updated>2022-03-09T15:01:41.837Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>斐波那契数 （通常用<code> F(n)</code> 表示）形成的序列称为 斐波那契数列 。该数列由 <code>0 </code>和 <code>1 </code>开始，后面的每一项数字都是前面两项数字的和。也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">F(<span class="number">0</span>) = <span class="number">0</span>，F(<span class="number">1</span>) = <span class="number">1</span></span><br><span class="line">F(n) = F(n - <span class="number">1</span>) + F(n - <span class="number">2</span>)，其中 n &gt; <span class="number">1</span></span><br></pre></td></tr></table></figure><p>给定<code> n</code> ，请计算<code> F(n)</code> 。</p><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一 递归"></a>方法一 递归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fib</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.fib(n-<span class="number">1</span>)+self.fib(n-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="方法二-动态规划"><a href="#方法二-动态规划" class="headerlink" title="方法二 动态规划"></a>方法二 动态规划</h2><p>利用滚动数组思想</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> n&lt;<span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> n</span><br><span class="line">p,q,r = <span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">    p = q</span><br><span class="line">    q = r</span><br><span class="line">    r = p + q</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;p&gt;斐波那契数 （通常用&lt;code&gt; F(n)&lt;/code&gt; 表示）形成的序列称为 斐波那契数列 。该数列由 &lt;code&gt;0 &lt;/code&gt;和 </summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://guoxiansen.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode20-有效的括号</title>
    <link href="https://guoxiansen.github.io/2022/03/09/LeetCode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://guoxiansen.github.io/2022/03/09/LeetCode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2022-03-09T09:32:41.000Z</published>
    <updated>2022-03-09T13:41:06.444Z</updated>
    
    <content type="html"><![CDATA[<img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220309175058989.png" alt="image-20220309175058989" style="zoom:67%;" /><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个只包括 ‘<code>(</code>‘，’<code>)</code>‘，’<code>&#123;</code>‘，’<code>&#125;</code>‘，’<code>[</code>‘，’<code>]&#39;</code> 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="匹配失败的情况"><a href="#匹配失败的情况" class="headerlink" title="匹配失败的情况"></a>匹配失败的情况</h3><ol><li><p>左括号多了   例如</p><p>​     <img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/a8f6eab320dbcacaded82af7a0b14eda752fa38dc6e28366d7fb319627e86c67-image.png" alt="image.png"></p></li><li><p>右括号多了   例如</p><p>​        <img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/ef62ae33b112b52cd984c2eb6a4f73a51ad815a9a71b7e9aab7473611ba15300-image.png"></p><p>​        </p></li><li><p>括号不匹配   例如</p><p>​        <img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/b98abe29244f1db4c3e45b39e7dabd9a2bfb7193826e9db618e9fbb032780e7a-image.png" alt="image.png"></p></li></ol><p>排除掉上面的是那种匹配失败的情况之后，剩余的都是匹配成功</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>核心思想是利用栈去匹配括号</p><p>用字典构造一个哈希表，表示右括号对应的左括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>用一个字符串表示左括号</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kuohao = <span class="string">&#x27;&#123;([&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="我的解法"><a href="#我的解法" class="headerlink" title="我的解法"></a>我的解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 括号匹配问题 使用栈来匹配</span></span><br><span class="line">        s = <span class="built_in">list</span>(s)</span><br><span class="line">        dic = &#123;<span class="string">&#x27;&#125;&#x27;</span>:<span class="string">&#x27;&#123;&#x27;</span>,<span class="string">&#x27;]&#x27;</span>:<span class="string">&#x27;[&#x27;</span>,<span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>&#125;</span><br><span class="line">        kuohao = <span class="string">&#x27;&#123;([&#x27;</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="comment"># 如果stack为空的话，则入栈 这种情况排除第一个就是右括号的情况</span></span><br><span class="line">            <span class="comment"># print(stack)          </span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> stack:</span><br><span class="line">                stack.append(i)</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 如果是左括号则入栈</span></span><br><span class="line">            <span class="keyword">if</span> i <span class="keyword">in</span> kuohao:</span><br><span class="line">                stack.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># print(&#x27;dic[i] is &#x27;, dic[i])</span></span><br><span class="line">                <span class="comment"># 哈希表中对应的值与栈尾元素进行比较</span></span><br><span class="line">                <span class="keyword">if</span> dic[i]==stack[-<span class="number">1</span>]:</span><br><span class="line">                    <span class="comment"># 括号匹配成功之后则弹出栈</span></span><br><span class="line">                    stack.pop()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="comment"># 匹配不成功则是匹配失败的第三种情况</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># print(&#x27;stack is &#x27;,stack)</span></span><br><span class="line">        <span class="comment"># 如果stack栈不为空的话则是匹配失败的第一种和第二种情况</span></span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 排除三种异常情况之外则匹配成功</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span>    </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20220309175058989.png&quot; alt=&quot;image-20220309175058989&quot; style=&quot;zoom:67%;&quot; /&gt;
</summary>
      
    
    
    
    
    <category term="LeetCode" scheme="https://guoxiansen.github.io/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="https://guoxiansen.github.io/2022/01/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://guoxiansen.github.io/2022/01/03/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-01-03T14:52:08.000Z</published>
    <updated>2023-10-10T02:41:47.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101035462.jpeg" alt="img"></p><h1 id="Docker学习笔记"><a href="#Docker学习笔记" class="headerlink" title="Docker学习笔记"></a>Docker学习笔记</h1><h2 id="作者：郭寅之"><a href="#作者：郭寅之" class="headerlink" title="作者：郭寅之"></a>作者：郭寅之</h2><p><strong>B站/Youtube：Clay_Guo</strong></p><p><strong>邮箱</strong>：guoyinzhi@foxmail.com</p><h1 id="一-Docker介绍"><a href="#一-Docker介绍" class="headerlink" title="一.Docker介绍"></a>一.Docker介绍</h1><h2 id="1-1-引言"><a href="#1-1-引言" class="headerlink" title="1.1 引言"></a>1.1 引言</h2><blockquote><p>1.我本地运行没有问题，</p><p>​    环境不一致会出现问题</p><p>2.哪个哥们又写死循环了，怎么这么卡。 </p><p>​    在多用户的操作系统下，会相互影响</p><p>3.淘宝在双十一的时候，海量并发的解决方案，用户量暴增的情况下</p><p>​    运维成本过高的问题</p><p>4.学习一门技术，学习安装成本过高</p><p>​    安装软件成本过高</p></blockquote><h2 id="1-2-Docker的由来"><a href="#1-2-Docker的由来" class="headerlink" title="1.2 Docker的由来"></a>1.2 Docker的由来</h2><blockquote><p>一帮年轻人创业，创办了一家公司，2010年的专门做PAAS平台</p><p>到2013年的时候，亚马逊，微软，谷歌都开始做PAAS平台</p><p>2013年，将公司的核心技术对外开源，核心技术就是Docker</p><p>到了2014年的时候，这家公司得到了C轮融资$4000w</p><p>到了2015年的时候，得到了D轮融资 $9500w 用于全神贯注的维护Docker</p><p>所罗门 主要作者之一</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101038425.png" alt="image-20201127162000792"></p><blockquote><p>Docker的作者已经离开了维护Docker的团队。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039916.png" alt="image-20201127162102934"></p><h2 id="1-3-Docker思想"><a href="#1-3-Docker思想" class="headerlink" title="1.3 Docker思想"></a>1.3 Docker思想</h2><blockquote><p>1.集装箱</p><p>​    docker会将所有需要的内容放到不同的集装箱中，谁需要这个环境就直接拿到这个集装箱就可以了。</p><p>2.标准化</p><p>​    1. 运输的标准化：Docker有一个码头，所有上传的集装箱都放在了这个码头上面，当谁需要某一个环境，就直接指派大海豚去搬运这个集装箱即可</p><p>​    2. 命令的标准化：Docker提供了一系列的命令，帮助我们去获取集装箱等等操作</p><p>​    3. 提供了REST的API：衍生出了很多图形化界面，Rancher</p><p>3.隔离性</p><p>​    Docker在运行集装箱内的内容时候，会在Linux内核中，单独开辟出一片空间，这片空间不会影响到其他程序</p></blockquote><blockquote><ul><li>注册中心 （超级码头，上面放到就是集装箱）</li><li>镜像（集装箱）</li><li>容器（运行起来的镜像）</li></ul></blockquote><h1 id="二-Docker的基本操作"><a href="#二-Docker的基本操作" class="headerlink" title="二.Docker的基本操作"></a>二.Docker的基本操作</h1><h2 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 下载关于Docker的依赖环境</span></span><br><span class="line">yum -y install yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 设置一下下载Docker的镜像源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 安装Docker</span></span><br><span class="line">yum makecache fast</span><br><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 启动，并设置为开机自动启动，测试</span></span><br><span class="line"><span class="comment"># 启动Docker服务</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="comment"># 设置开机自动启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 测试</span></span><br><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>检测安装是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039487.png" alt="image-20201128015052534"></p><h2 id="2-2-Docker中央仓库（注册中心）"><a href="#2-2-Docker中央仓库（注册中心）" class="headerlink" title="2.2 Docker中央仓库（注册中心）"></a>2.2 Docker中央仓库（注册中心）</h2><blockquote><p>1.Docker官方的中央仓库：这个仓库是镜像最全的，但是下载速度慢</p><p><a href="https://hub.docker.com/">https://hub.docker.com/</a></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039097.png" alt="image-20201127164656745"></p><p>2.国内的镜像网站：网易蜂巢（需要登录）、daoCloud</p><p><a href="http://hub.daocloud.io/">http://hub.daocloud.io/</a></p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039064.png" alt="image-20201127164612997"></p><p>3.在公司内部可以 采用私服的方式拉取镜像（添加配置才能生效）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要在/etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;registry-mirrors&quot;</span>:[<span class="string">&quot;https://registry.docker-cn.com&quot;</span>],</span><br><span class="line">    <span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;ip:port&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 重启两个服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-3-镜像的操作"><a href="#2-3-镜像的操作" class="headerlink" title="2.3 镜像的操作"></a>2.3 镜像的操作</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像到本地</span></span><br><span class="line">docker pull 镜像名称[:tag]</span><br><span class="line"><span class="comment"># 举个例子</span></span><br><span class="line">docker pull tomcat daocloud.io/library/tomcat:8.5.15-jre8</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看全部本地的镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 3. 删除本地镜像</span></span><br><span class="line">docker rmi 镜像的标识</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 镜像的导入导出（不规范）</span></span><br><span class="line"><span class="comment"># 将本地的镜像导出</span></span><br><span class="line">docker save -o 导出的路径 镜像id</span><br><span class="line">docker save -o ./nginx.image 55</span><br><span class="line"><span class="comment"># 加载本地的镜像文件</span></span><br><span class="line">docker load -i 镜像文件</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改镜像名称</span></span><br><span class="line">docker tag 镜像id 新镜像名称:版本</span><br></pre></td></tr></table></figure><p>加载本地的镜像文件</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039517.png" alt="image-20201128013941247"></p><p>修改镜像名称</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101039844.png" alt="image-20201128014135318"></p><h2 id="2-4-容器的操作"><a href="#2-4-容器的操作" class="headerlink" title="2.4 容器的操作"></a>2.4 容器的操作</h2><p>容器：运行起来的镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 运行容器</span></span><br><span class="line"><span class="comment"># 简单操作</span></span><br><span class="line">docker run 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># 常用的参数</span></span><br><span class="line">docker run -d -p 宿主机端口:容器端口 --name 容器名称 镜像的标识|镜像名称[:tag]</span><br><span class="line"><span class="comment"># -d：代表后台运行容器</span></span><br><span class="line"><span class="comment"># -p 宿主机端口:容器端口：为了映射当前Linux端口和容器端口</span></span><br><span class="line"><span class="comment"># --name 容器名称：指定容器的名称</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看正在运行的容器</span></span><br><span class="line">docker ps [-qa]</span><br><span class="line"><span class="comment"># -a：查看全部的容器，包括没有运行</span></span><br><span class="line"><span class="comment"># -p：只查看容器得到标识</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 查看容器的日志</span></span><br><span class="line">docker logs -f 容器id</span><br><span class="line"><span class="comment"># -f：可以滚动查看日志的最后几行</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 进入到容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 容器id bash</span><br><span class="line"><span class="comment"># 可以方便查看容器内部的相关资源</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 删除容器（删除容器前，需要停止容器）</span></span><br><span class="line"><span class="comment"># 停止指定的容器</span></span><br><span class="line">docker stop 容器id</span><br><span class="line"><span class="comment"># 停止全部容器</span></span><br><span class="line">docker stop $(docker ps -qa)</span><br><span class="line"><span class="comment"># 删除指定的容器</span></span><br><span class="line">docker rm 容器id</span><br><span class="line"><span class="comment"># 删除全部容器</span></span><br><span class="line">docker rm $(docker pa -qa)</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 6. 启动容器</span></span><br><span class="line">docker start 容器id</span><br></pre></td></tr></table></figure><p>查看tomcat服务</p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040998.png" alt="image-20201128033204215" style="zoom:80%;" /><h1 id="三-Docker应用"><a href="#三-Docker应用" class="headerlink" title="三.Docker应用"></a>三.Docker应用</h1><h2 id="3-1-准备SSM工程"><a href="#3-1-准备SSM工程" class="headerlink" title="3.1 准备SSM工程"></a>3.1 准备SSM工程</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># MySQL数据库的连接用户名和密码改变了，修改db.properties</span></span><br></pre></td></tr></table></figure><h2 id="3-2-准备MySQL容器"><a href="#3-2-准备MySQL容器" class="headerlink" title="3.2 准备MySQL容器"></a>3.2 准备MySQL容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行MySQL容器</span></span><br><span class="line">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=root daocloud.io/library/mysql:8.0.18</span><br></pre></td></tr></table></figure><h2 id="3-3-准备Tomcat容器"><a href="#3-3-准备Tomcat容器" class="headerlink" title="3.3 准备Tomcat容器"></a>3.3 准备Tomcat容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行Tomcat容器，前面已经搞定，只需要将SSM项目的war包部署到Tomcat容器内部即可</span></span><br><span class="line"><span class="comment"># 可以通过命令将宿主机的内容服务到容器内部</span></span><br><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br><span class="line"><span class="comment"># 举个例子</span></span><br><span class="line">docker cp ssm.war fe:/usr/<span class="built_in">local</span>/tomcat/webapps</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-数据卷"><a href="#3-4-数据卷" class="headerlink" title="3.4 数据卷"></a>3.4 数据卷</h2><blockquote><p>为了部署SSM的工程，需要使用到cp的命令将宿主机内的ssm.war文件复制到容器内部</p><p>数据卷：将宿主机的一个目录映射到容器的一个目录中</p><p>可以在宿主机中操作目录中的内容，那么容器内部映射的文件，也会随着一起改变</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建数据卷</span></span><br><span class="line">docker volume create 数据卷名称</span><br><span class="line"><span class="comment"># 创建数据卷之后，默认会放在一个目录下 /var/lib/docker/volumes/数据卷名称/_data</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040360.png" alt="image-20201128025507315"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 查看数据卷的详细信息</span></span><br><span class="line">docker volume inspect 数据卷名称</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040798.png" alt="image-20201128025705639"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 查看全部数据卷</span></span><br><span class="line">docker volume ls</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040050.png" alt="image-20201128025758566"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 删除数据卷</span></span><br><span class="line">docker volume rm 数据卷名称</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 应用数据卷</span></span><br><span class="line"><span class="comment"># 当你映射数据卷时，如果数据卷不存在。Docker会帮你自动创建，会将容器内部自带的文件，存储在默认的存放路径中</span></span><br><span class="line">docker run -v 数据卷名称:容器内部的路径 镜像id</span><br><span class="line"><span class="comment"># 直接指定一个路径作为数据卷的存放位置（此文件不会将其他文件带过来，无法访问tomcat主页）这个路径下是空的。 此方式用的多一些</span></span><br><span class="line">docker run -v 路径：容器内部的路径 镜像id </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040324.png" alt="image-20201128031402401"></p><h1 id="四-Docker自定义镜像"><a href="#四-Docker自定义镜像" class="headerlink" title="四.Docker自定义镜像"></a>四.Docker自定义镜像</h1><blockquote><p>中央仓库上的镜像，也是Docker的用户自己上传过去的。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 创建一个Dockerfile文件，并制定自定义镜像信息</span></span><br><span class="line"><span class="comment"># Dockerfile文件中常用的内容</span></span><br><span class="line">from：制定当前自定义镜像依赖的环境</span><br><span class="line">copy: 将相对路径下的内容复制到自定义镜像中</span><br><span class="line">workdir： 声明镜像的默认工作目录</span><br><span class="line">cmd:  需要执行的命令（在workdir下执行的，cmd可以写多个，只以最后一个为准）</span><br><span class="line"><span class="comment"># 举个例子，自定义一个tomcat镜像，并且将ssm.war 部署到tomcat中</span></span><br><span class="line">from daocloud.io/library/tomcat:7.0.56</span><br><span class="line">copy ssm.war /usr/<span class="built_in">local</span>/tomcat/webapps</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 将准备好的Dockerfile和相应的文件拖拽到Linux操作系统中，通过Docker的命令制作镜像</span></span><br><span class="line">docker build -t 镜像名称:[tag]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-1-制作镜像"><a href="#4-1-制作镜像" class="headerlink" title="4.1 制作镜像"></a>4.1 制作镜像</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101040505.png" alt="image-20201128152400425"></p><h2 id="4-2-运行镜像"><a href="#4-2-运行镜像" class="headerlink" title="4.2 运行镜像"></a>4.2 运行镜像</h2><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101041531.png" alt="image-20201128152810795"></p><h2 id="4-3-访问该服务"><a href="#4-3-访问该服务" class="headerlink" title="4.3 访问该服务"></a>4.3 访问该服务</h2><p>使用8081端口访问到tomcat服务</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101041616.png" alt="image-20201128152858265"></p><h1 id="五-Docker-Compose"><a href="#五-Docker-Compose" class="headerlink" title="五.Docker-Compose"></a>五.Docker-Compose</h1><blockquote><p>之前运行一个镜像，需要添加大量的参数</p><p>可以通过Docker-compose编写这些参数</p><p>Docker-compose可以帮助我们批量的管理容器</p><p>只需要通过一个docker-compose.yml文件去维护即可</p></blockquote><h2 id="6-1-下载Docker-Compose"><a href="#6-1-下载Docker-Compose" class="headerlink" title="6.1 下载Docker-Compose"></a>6.1 下载Docker-Compose</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 去GitHub官网搜索docker-compose，下载最新版本的Docker-Compose</span></span><br><span class="line">wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64</span><br><span class="line"><span class="comment"># 2. 将下载好的文件，拖拽到Linux操作系统中</span></span><br><span class="line"><span class="comment"># 3. 需要将Docker-Compose文件名称修改一下，给予DockerCompose文件一个可执行的权限</span></span><br><span class="line">mv docker-compose-Linux-x86_64 docker-compose</span><br><span class="line">chmod 777 docker-compose</span><br><span class="line"><span class="comment"># 4. 方便后期操作，配置一个环境变量</span></span><br><span class="line"><span class="comment"># 将docker-compose文件移动到/usr/local/bin，修改了/etc/profile文件，给/usr/local/bin配置到PATH中</span></span><br><span class="line">mv docker-compose /usr/<span class="built_in">local</span>/bin</span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>:/usr/<span class="built_in">local</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 5. 测试一下</span></span><br><span class="line"><span class="comment"># 在任意目录下输入docker-compose</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>验证docker-compose是否安装成功</p><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101041382.png" alt="image-20201128174820678"></p><h2 id="6-2-Docker-Compose管理MySQL和Tomcat容器"><a href="#6-2-Docker-Compose管理MySQL和Tomcat容器" class="headerlink" title="6.2 Docker-Compose管理MySQL和Tomcat容器"></a>6.2 Docker-Compose管理MySQL和Tomcat容器</h2><blockquote><p>yml文件以key: value方式来指定配置信息</p><p>多个配置信息以换行+缩进的方式来区分</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span>                     <span class="comment"># 服务的名称</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/mysql:8.0.18</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/mysql_data:/var/lib/mysql</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>          <span class="comment"># 代表只要Docker启动，那么这个容器就跟着一起启动</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span>     <span class="comment"># 指定镜像路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">tomcat</span>    <span class="comment"># 指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span>        <span class="comment"># 指定端口号的映射</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span>         <span class="comment"># 指定MySQL的ROOT用户登录密码</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span>                 <span class="comment"># 指定时区</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_webapps:/usr/local/tomcat/webapps</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/opt/docker_mysql-tomcat/tomcat_logs:/usr/local/tomcat/logs</span>        <span class="comment"># 映射数据卷</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-3-使用Docker-compose命令管理容器"><a href="#6-3-使用Docker-compose命令管理容器" class="headerlink" title="6.3 使用Docker-compose命令管理容器"></a>6.3 使用Docker-compose命令管理容器</h2><blockquote><p>在使用docker-compose的命令时，默认会在当前目录下找docker-compose.yml文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.基于docker-compose.yml启动管理的容器</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101041054.png" alt="image-20201128213302224"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. 关闭并删除容器</span></span><br><span class="line">docker-compose down</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. 开启或关闭已经存在的由docker-compose维护的容器</span></span><br><span class="line">docker-compose start | stop | restart</span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. 查看由docker-compose管理的容器</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101041667.png" alt="image-20201128212828179"></p><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5. 查看日志</span></span><br><span class="line">docker-compose logs -f</span><br></pre></td></tr></table></figure><h2 id="6-4-docker-compose配置Dockerfile使用"><a href="#6-4-docker-compose配置Dockerfile使用" class="headerlink" title="6.4 docker-compose配置Dockerfile使用"></a>6.4 docker-compose配置Dockerfile使用</h2><blockquote><p>使用docker-compose.yml文件以及Dockerfile文件在生成自定义镜像的同时启动当前镜像，并且由docker-compose去管理容器。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yml文件</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ssm:</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">build:</span>                           <span class="comment"># 构建自定义镜像</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">../</span>                   <span class="comment"># 指定Dockerfile文件所在路径</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span>         <span class="comment"># 指定Dockerfile文件名称</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ssm:1.0.1</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ssm</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="number">8081</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Dockerfile</span></span><br><span class="line"><span class="string">from</span> <span class="string">daocloud.io/library/tomcat:8.5.15-jre8</span></span><br><span class="line"><span class="string">copy</span> <span class="string">ssm.war</span> <span class="string">/usr/local/tomcat/webapps</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接启动基于docker-compose.yml以及Dockerfile文件构建的自定义镜像</span></span><br><span class="line">docker-compose up -d</span><br><span class="line"><span class="comment"># 如果自定义镜像不存在，会帮助我们构建出自定义镜像，如果自定义镜像已经存在，会直接运行这个自定义镜像</span></span><br><span class="line"><span class="comment"># 重新构建的话</span></span><br><span class="line"><span class="comment"># 重新构建自定义镜像</span></span><br><span class="line">docker-compose build</span><br><span class="line"><span class="comment"># 运行前，重新构建</span></span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><h1 id="六-Docker-CI-CD"><a href="#六-Docker-CI-CD" class="headerlink" title="六.Docker CI/CD"></a>六.Docker CI/CD</h1><h2 id="7-1-引言"><a href="#7-1-引言" class="headerlink" title="7.1 引言"></a>7.1 引言</h2><blockquote><p>项目部署</p><pre><code>1. 将项目通过maven进行编译打包 2. 将文件上传到指定的服务器中 3. 将war包放到tomcat的目录中 4. 通过Dockerfile将tomcat和war包转成一个镜像，由docker-compose去运行容器</code></pre><p>项目更新了</p><p>​    将上述流程再次从头到尾执行一次</p><p>可以将上述流程自动化的去实现</p></blockquote><h2 id="7-2-CI介绍"><a href="#7-2-CI介绍" class="headerlink" title="7.2 CI介绍"></a>7.2 CI介绍</h2><blockquote><p>CI（continuous intergration）持续继承</p><p>持续集成：编写代码时，完成了一个功能后，立即提交代码到Git仓库中，将项目重新的构建并且测试</p><ul><li>快速发现错误</li><li>防止代码偏离主分支</li></ul></blockquote><h2 id="7-3-实现持续继承"><a href="#7-3-实现持续继承" class="headerlink" title="7.3 实现持续继承"></a>7.3 实现持续继承</h2><h3 id="7-3-1-搭建Gitlab服务器"><a href="#7-3-1-搭建Gitlab服务器" class="headerlink" title="7.3.1 搭建Gitlab服务器"></a>7.3.1 搭建Gitlab服务器</h3><blockquote><p> 1、创建一个全新的虚拟机，并且至少指定4G的运行内存</p></blockquote><blockquote><p> 2、安装docker以及docker-compose</p></blockquote><blockquote><p> 3、将ssh的默认22端口，修改为60022端口</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">PORT 22 -&gt; 60022</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure><blockquote><p> 4、docker-compose.yml问价去安装GitLab</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">gitlab:</span> </span><br><span class="line">   <span class="attr">image:</span> <span class="string">&#x27;twang2218/gitlab-ce-zh:11.1.4&#x27;</span></span><br><span class="line">   <span class="attr">container_name:</span> <span class="string">&quot;gitlab&quot;</span></span><br><span class="line">   <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">   <span class="attr">privileged:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">hostname:</span> <span class="string">&#x27;gitlab&#x27;</span></span><br><span class="line">   <span class="attr">environment:</span> </span><br><span class="line">     <span class="attr">TZ:</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">     <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> </span><br><span class="line">       <span class="string">external_url</span> <span class="string">&#x27;http://192.168.199.110&#x27;</span></span><br><span class="line">       <span class="string">gitlab_rails[&#x27;time_zone&#x27;]</span> <span class="string">=</span> <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">       <span class="string">gitlab_rails[&#x27;smtp_enable&#x27;]</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">      <span class="string">gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;]</span> <span class="string">=</span> <span class="number">22</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&#x27;22:22&#x27;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/config:/etc/gitlab</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/data:/var/opt/gitlab</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/opt/docker_gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><code>[1]</code> 千锋教育-2020版-Docker最新超详细版教程通俗易懂 <em><a href="https://www.bilibili.com/video/BV1sK4y1s7Cj">https://www.bilibili.com/video/BV1sK4y1s7Cj</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/GuoXianSen/pic-bed@main/imgs/202310101035462.jpeg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;Docker学习笔记&quot;&gt;&lt;a href=&quot;#Doc</summary>
      
    
    
    
    
    <category term="Docker" scheme="https://guoxiansen.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>PicGo+Typora搭建个人笔记系统</title>
    <link href="https://guoxiansen.github.io/2021/12/29/Picgo-Typora%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/"/>
    <id>https://guoxiansen.github.io/2021/12/29/Picgo-Typora%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/</id>
    <published>2021-12-29T14:50:57.000Z</published>
    <updated>2022-02-23T05:17:37.728Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PicGo-Typora搭建个人笔记系统"><a href="#PicGo-Typora搭建个人笔记系统" class="headerlink" title="PicGo+Typora搭建个人笔记系统"></a>PicGo+Typora搭建个人笔记系统</h1><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/a.jpg" alt="a"></p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><blockquote><p>从开始读书的时候，笔记就是我必不可少的一样东西。大学的学习中，每门课都不能缺少笔记。在pc端中，常见的笔记软件有<code>word</code>，<code>印象笔记</code>，<code>OneNote</code>，<code>Sublime Text</code>，<code>Notepad++</code>等。在大学的时候，一次偶然的机会，听学长介绍了markdown以及一款写markdown的软件<code>Typora</code>，至此开始使用markdown记录自己的笔记，并且很多平台，例如微信公众号，知乎等都已经支持markdown语法了。但是在后续的使用过程中，记笔记的同时经常需要放置图片，这时会让我在与其他人共享的时候出现图片无法访问的情况，这是由于图片粘贴过来之后是存储在本地的，而他人在自己的电脑中是无法访问到我的图片的。后来我采取的方案是使用云商提供的对象存储。我使用过的有阿里云、腾讯云以及七牛云。但是后来发现这些云商提供的服务到后面需要收费。因此我又开始琢磨，我自己正好有几台云服务器，为啥不在我的云服务器上面去搭建一个图床呢，这个时候经过一番资料的收集以及多次尝试，最终我敲定了我自己的方案，在我的云服务器上面搭建一个个人图床，采用的模板是Chevereto<sup><code>[1]</code></sup>。当时我还给我的图床配置了一个专属的二级域名（一级域名给了我的博客）。原本以为这样就可以万事大吉了，但是随着我的使用，服务器到期了需要迁移的话，图床需要重新二次部署，图片也会丢失，数据无价，这样的话也会让我自己在使用中碰到不利…..后来我也尝试着将图片存储在GitHub上，但是由于其服务器架设在国外，访问速度上就非常的不占优势。在不断的探索尝试之后，我采用了如下方案。</p></blockquote><h2 id="最终解决方案"><a href="#最终解决方案" class="headerlink" title="最终解决方案"></a>最终解决方案</h2><p>经过上面的一番周折，我使用了现在的这套解决方案。也就是利用Typora<sup><code>[2]</code></sup>来记笔记，然后使用在使用PicGo<sup><code>[3]</code></sup>进行图片管理，每次将我的图片存储到Gitee<sup><code>[4]</code></sup>上，这样既照顾到了访问速度，在数据的安全性上也相对照顾。</p><h2 id="提前准备"><a href="#提前准备" class="headerlink" title="提前准备"></a>提前准备</h2><ul><li>Gitee   <em><a href="https://gitee.com/">https://gitee.com/</a></em></li><li>node.js  <em><a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a></em></li><li>Picgo   <em><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></em></li><li>Typora  <em><a href="https://www.typora.io/">https://www.typora.io/</a></em></li></ul><h3 id="Gitee"><a href="#Gitee" class="headerlink" title="Gitee"></a>Gitee</h3><blockquote><p>Gitee和GitHub类型，都是代码托管平台，和GitHub相比最大的都是就是其访问速度。本次我们需要使用他来存放我们的图片。</p></blockquote><p>传送门：*<a href="https://gitee.com/">https://gitee.com/</a>*</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230215454332.png" alt="image-20201230215454332"></p><p><strong>新建仓库</strong>，这里我取名为<code>pic-bed</code>，是否开源一定要选择公开，否则其他人无法访问到你这个仓库中的图片的。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230220800255.png" alt="image-20201230220800255"></p><p>初始化仓库，选择只创建master分支，最后点击创建</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230221820087.png" alt="image-20201230221820087"></p><p>之后点击自己的头像，点击设置</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230221439002.png" alt="image-20201230221439002"></p><p>在安全设置中，点击私人令牌</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230221519170.png" alt="image-20201230221519170"></p><p>点击生成新令牌</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230221552329.png" alt="image-20201230221552329"></p><p>修改配置如下：</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230221624692.png" alt="image-20201230221624692"></p><p>点击提交，复制一下出现的<code>token</code>，<strong>接下来要用的到的！</strong></p><p><strong>gitee缺陷</strong>，在后续的使用过程中，大概率会碰到，有时候无法访问图片的情况，但是通过图片的地址，是可以访问到图片的，这是因为gitee为了出于安全考虑，大于1M的文件，需要登录之后才可以访问。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/Gitee%E9%99%90%E5%88%B6.png" alt="Gitee限制"></p><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><blockquote><p>node 是一个让 JavaScript 运行在服务端的开发平台，它让 JavaScript 成为与PHP、Python、Perl、Ruby 等服务端语言平起平坐的脚本语言。为了下面PicGo安装插件，我们需要安装他。这里不推荐使用最新node14+版本，可能会出现各种各样的玄学问题。</p></blockquote><p>下载地址：*<a href="https://nodejs.org/dist/latest-v12.x/">https://nodejs.org/dist/latest-v12.x/</a>*</p><p>大家根据自己的需要选择对应的版本安装包安装即可。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230222326030.png" alt="image-20201230222326030"></p><h3 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h3><p>传送门：  <em><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></em></p><p>根据自己的系统来选择对应的版本</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230215907545.png" alt="image-20201230215907545"></p><p>软件安装成功打开的界面如下：</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230220004989.png" alt="image-20201230220004989"></p><p>可以选择链接格式（markdown、HTML、URL、UBB、Custom等），另外也需要设置一下图床，PicGo默认是没有gitee图床的，但是我们可以通过插件来添加gitee，插件名为<code>gitee-uploade</code>。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230220316974.png" alt="image-20201230220316974"></p><p>安装成功之后，在图床设置中选择gitee即可。</p><p>下面进行图床配置</p><p><code>repo</code> 填写你的gitee仓库全部路径</p><p><code>branch</code> 填写你的master分支（创建的时候选择其他分支的话，就填写你的分支）</p><p><code>token</code> 填写上面Gitee令牌刚生成的token</p><p><code>path</code> 填写img即可</p><p>剩下的不填即可点击确定，设为默认图床即可。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230222513746.png" alt="image-20201230222513746"></p><h3 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h3><blockquote><p>Typora是一款用于记录markdown笔记的软件，功能非常强大，真正的可以让程序员无需在文档格式上花费太多时间，仅需要专注于自己的文档写作即可。</p></blockquote><p>下载地址：*<a href="https://www.typora.io/">https://www.typora.io/</a>*</p><p>这里我们可以根据自己的操作系统来选择对应的Typora版本，然后无脑进行下一步即可。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230213056356.png" alt="image-20201230213056356"></p><p>安装完成双击即可打开软件</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230213328719.png" alt="image-20201230213328719"></p><p>然后我们就可以根据markdown语法进行文档写作了。</p><p>这里简单介绍一些Typora的<strong>功能</strong></p><p>首先，我们可以根据自己的需求选择不同的主题</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230213551206.png" alt="image-20201230213551206"></p><p>当然，默认提供的主题种类比较少，但是Typora也想到了这一点，给我们提供了一个主题网站，大家可以根据自己的需要去选择自己所喜欢的主题。</p><p>传送门：<em><a href="https://theme.typora.io/">https://theme.typora.io/</a></em></p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230214557380.png" alt="image-20201230214557380"></p><p>另外，我们可以将markdown写好的文档转换成多种格式，这样方便在其他的设备上也能查看该文档。例如我们可以在markdown上写论文，然后再将它转为<code>.doc</code>格式的文档。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230215030977.png" alt="image-20201230215030977"></p><p>这里仅举两个例子，更多的功能大家可以自行探索。</p><p>让人高兴的是，在typora的一次更新升级中，他的日志显示，其开始支持PicGo图床，这次的更新也让本文的方案成为现实。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201229233855646.png" alt="image-20201229233855646"></p><p>下面进行<strong>图床配置</strong>，点击偏好设置</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230222903097.png" alt="image-20201230222903097"></p><p>在图片选项中，选择插入图片是上传图片，上传服务设定为</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230222949422.png" alt="image-20201230222949422"></p><p>配置好了之后，我们先选择验证图片上传选项，显示如下内容即为成功</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230223342580.png" alt="image-20201230223342580"></p><p>之后，只要我们在typora中粘贴一张图片，就会自动上传到我们的gitee仓库中，是不是非常的方便。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里我们随便粘贴一张图片进来，这个图片可以是截图，可以是直接复制一张图片粘贴，也可以是网络上的图片。</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230223716739.png"></p><p>这里我们可以看到，在进行图片上传</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230223741802.png" alt="image-20201230223741802"></p><p>在上传成功之后，windows会进行通知，显示在右下角</p><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/image-20201230223605752.png" alt="image-20201230223605752"></p><p>这样我们就可以进行自己的笔记系统的搭建了，后面可以把我们的笔记快捷的用Hexo发布，也可以发布在其他的博客系统亦或是GitHub中。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲述了一种利用PicGo和Typora构建的个人笔记系统，使用体验从我个人角度来说非常的nice，但由于Gitee的1M限制，存储的图片只能是1M以下的，这点就非常的不人性化，当然你也可以牺牲速度换取大小来选择GitHub作为图床，或者你是RMB玩家，可以选择使用诸如腾讯云、阿里云、七牛云等云商提供的对象存储来搭建性能更好的图床。This is your choice, I shall have no right to interfere</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><code>[1]</code>  Chevereto官网    <em><a href="https://chevereto.com/">https://chevereto.com/</a></em></p><p><code>[2]</code>  Typora官网    <em><a href="https://www.typora.io/">https://www.typora.io/</a></em></p><p><code>[3]</code>  PicGo官网    <em><a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></em></p><p><code>[4]</code>  gitee官网    <em><a href="https://gitee.com/">https://gitee.com/</a></em></p><p><code>[5]</code>  node.js官网    <em><a href="https://nodejs.org/">https://nodejs.org/</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PicGo-Typora搭建个人笔记系统&quot;&gt;&lt;a href=&quot;#PicGo-Typora搭建个人笔记系统&quot; class=&quot;headerlink&quot; title=&quot;PicGo+Typora搭建个人笔记系统&quot;&gt;&lt;/a&gt;PicGo+Typora搭建个人笔记系统&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="效率" scheme="https://guoxiansen.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
    <category term="PicGo" scheme="https://guoxiansen.github.io/tags/PicGo/"/>
    
    <category term="Typora" scheme="https://guoxiansen.github.io/tags/Typora/"/>
    
    <category term="Markdown" scheme="https://guoxiansen.github.io/tags/Markdown/"/>
    
    <category term="笔记" scheme="https://guoxiansen.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Git使用教程</title>
    <link href="https://guoxiansen.github.io/2021/12/28/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://guoxiansen.github.io/2021/12/28/Git%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</id>
    <published>2021-12-28T14:52:08.000Z</published>
    <updated>2022-02-23T05:17:50.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git与GitHub使用教程"><a href="#Git与GitHub使用教程" class="headerlink" title="Git与GitHub使用教程"></a>Git与GitHub使用教程</h1><p><img src="https://gitee.com/clay_guo/pic-bed/raw/master/img/u=1294953991,2171358706&fm=11&gp=0.jpg" alt="img"></p><blockquote><p>很久很久以前，进行软件项目开发的时候，可能是一个人独自开发，亦或是进行复制粘贴每天写好的项目模块。随着软件项目的庞大，一个项目可能就不会再由一个人独自开发了，往往就需要团队之间进行协作开发，因此，协议团队协作开发版本管理的软件就应运而生了。常见的有SVN<code>[1]</code>、Git<code>[2]</code>。代码托管网站也有很多，例如Github<code>[3]</code>以及国内的Gitee<code>[4]</code>。本文以GitHub+Git来详细说明如何用Git来管理自己的项目以及如何与他人进行团队协作开发。</p></blockquote><h2 id="需要准备的东西"><a href="#需要准备的东西" class="headerlink" title="需要准备的东西"></a>需要准备的东西</h2><ul><li>Git</li><li>GitHub注册好账号</li></ul><h2 id="使用指南"><a href="#使用指南" class="headerlink" title="使用指南"></a>使用指南</h2><h3 id="git更新本地分支与远程同步"><a href="#git更新本地分支与远程同步" class="headerlink" title="git更新本地分支与远程同步"></a>git更新本地分支与远程同步</h3><ol><li>进入到工程目录文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> project</span><br></pre></td></tr></table></figure><ol start="2"><li>选择一个分支</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout dev</span><br></pre></td></tr></table></figure><ol start="3"><li>拉取远程代码到本地</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull -p</span><br></pre></td></tr></table></figure><p> 第三步等同于下面的命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git fetch --prune origin </span><br><span class="line">git fetch -p</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><code>[1]</code> SVN  <em><a href="https://tortoisesvn.net/">https://tortoisesvn.net/</a></em></p><p><code>[2]</code> Git  <em><a href="https://gitee.com/">https://gitee.com/</a></em></p><p><code>[1]</code> Github  <em><a href="https://github.com/">https://github.com/</a></em></p><p><code>[2]</code> Gitee  <em><a href="https://gitee.com/">https://gitee.com/</a></em></p><p><code>[1]</code> Github  <em><a href="https://github.com/">https://github.com/</a></em></p><p><code>[2]</code> Gitee  <em><a href="https://gitee.com/">https://gitee.com/</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Git与GitHub使用教程&quot;&gt;&lt;a href=&quot;#Git与GitHub使用教程&quot; class=&quot;headerlink&quot; title=&quot;Git与GitHub使用教程&quot;&gt;&lt;/a&gt;Git与GitHub使用教程&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://gite</summary>
      
    
    
    
    
  </entry>
  
</feed>
